{
  "2014-05-21-list-item-image-marker-cross-browser": {
    "layout": "post",
    "title": "Cross browser CSS solution for custom List Icon",
    "date": "2014-05-21T03:05:00.000-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "cross browser solution to using an image as a list item marker",
      "using image as a list item marker",
      "custom list item marker"
    ],
    "modified_time": "2014-05-21T03:05:27.076-07:00",
    "photo_url": "/blog/The_UI_Dev_Default.png",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-6661967300163648320",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/05/list-item-image-marker-cross-browser.html",
    "preview": "Styling the list item markers is required on so many instances. …",
    "content": "\n\nStyling the list item markers is required on so many instances. There are so many readily available list styles like - square, circle, lower-alpha, roman and many more. Even after having a wide range of list styles, we are often faced with the challenge of using a custom list style. This is when we tend to use an icon image for the list items.\n\nWith CSS adding a custom image icon for list style is easily possible using the following code.\n\n``` javascript\n  list-style-image: url('icon.png');\n```\n\n<img src=\"/blog/Custom_List.png\" alt=\"Custom list style\" />\n\nHowever, this is not as simple as it appears. The above code doesn't display the output in the same way in all the browsers. IE7 and Opera will display the image marker a little bit higher than Firefox, Chrome and Safari. Our dear QA friends, will pounce on this and log an issue. QA 1 up! Now what? The developers have to find a solution to this and most will end up with a dirty hack. To avoid this, and be 1 up on our QA friends, here is a cross browser solution that works!\n\n```javascript\n.custom-list{\n  background: url('/route/to/list/icon.png') no-repeat left 1px; // This is the most important property in this class\n  padding-left: 18px;\n  display: block;\n  height: 22px;\n}\n```\n\nYou will add this class on every list item. The background is the most important CSS property here. Others are based on the size of the image icon being used. This will give a truely cross-browser implementation a custom list icon using CSS.\n\nHope this small bit of code proves useful to all of you. If this post has helped you, leave a comment or show your love by liking the [Spatial Unlimited](https://www.facebook.com/SpatialUnlimited) Facebook page. Till next time; happy coding!\n",
    "iso8601Date": "2014-05-21T03:05:00-07:00",
    "basename": "2014-05-21-list-item-image-marker-cross-browser"
  },
  "2014-06-27-responsive-websites-why-bother": {
    "layout": "post",
    "title": "Responsive Websites - Why bother?",
    "date": "2014-06-27T06:15:00.004-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "responsive design template",
      "responsive template",
      "mobile web design",
      "responsive website",
      "responsive website design"
    ],
    "modified_time": "2014-06-27T06:20:45.671-07:00",
    "photo_url": "/blog/The_UI_Dev_Default.png",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-8993502076980186472",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/06/responsive-websites-why-bother.html",
    "preview": "Responsive website is now the need of the day with a large user base …",
    "content": "\n\nResponsive website is now the need of the day with a large user base shifting to mobile devices to browse the web on the go! This is not a relatively new concept, but I came across 2 really nice info-graphics regarding \"Responsive Websites\" that talk about the mobile web design and the responsive website design or the responsive template. I would like to share these with you all.\n\nThe first info-graphic is courtesy of [SPINX](http://www.spinxdigital.com/) explaining **Why Responsive Websites are Key in a Multi Device World**!\n\n<img src=\"/blog/Infographic_1.jpg\" alt=\"Infograpic #1\" style=\"width: 50%;\" />\n\nThe next info-graphic courtesy of [Splio](http://splio.com/) and provides 10 basic tips to developers that they can remember while building responsive websites.\n\n<img src=\"/blog/Infographic_2.jpg\" alt=\"Infograpic #1\" style=\"width: 50%;\" />\n\n**Note:** The content of the info-graphics belongs to their respective creators.\n",
    "iso8601Date": "2014-06-27T06:15:00-07:00",
    "basename": "2014-06-27-responsive-websites-why-bother"
  },
  "2014-07-10-material-ui-google-polymer-web": {
    "layout": "post",
    "title": "Material UI, Google Polymer & Web Components",
    "date": "2014-07-10T03:40:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "Google Material UI",
      "Google Polymer",
      "google IO india",
      "material UI",
      "web components",
      "google IO",
      "imports",
      "custom elements",
      "polyfill js",
      "shadow dom"
    ],
    "modified_time": "2014-07-10T03:40:27.284-07:00",
    "photo_url": "/blog/Google_Polymer_logo.png",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3009512010824879471",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/07/material-ui-google-polymer-web.html",
    "preview": "Google introduced **Material UI** during the Google I/O a few days …",
    "content": "\n\nGoogle introduced **Material UI** during the Google I/O a few days back. Since then, the web is all abuzz with articles about material UI and what Polymer is and how these 2 fit together. In this article today, I will try and helps us all to get a better understanding of these new concepts.\n\n![Google Polymer](/blog/Material-Design-image.png)\n\nSo, let's start with **Material UI** first. Google has for long been trying to bridge the gap between the Web and the Android worlds with a unified user interface and Google's Material UI is a big step towards this. The new design philosophy is about dynamically adjusting the elements according to screen size, add more white space between elements, provide a lot of user feedback using animations, make use of bold UI colors and be flat and 3D about the design at the same time. Now that sounds really cool, isn't it? Well, actually it is and you will actually appreciate and enjoy it all the more when you watch the following video from this year's Google I/O.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dZqzz5lZFvo\" frameborder=\"0\" allowfullscreen></iframe>\n\nNow let's shift our focus to **Google Polymer**. Google Polymer is not new and has been around for about more than a year now. Though it is still available as a developer-preview sort of a thing, it is being used to create applications. Polymer is a pioneering library that makes it faster and easier than ever before to build beautiful applications on the web. Polymer is built on top of a set of powerful new web platform primitives called the Web Components. **Web Components** too have been around for quite some time now. Web Components were conceptualized in 2010. This is a great [article](http://css-tricks.com/modular-future-web-components/) that you should definitely read to understand what web components are.\n\n<img src=\"/blog/Polymer Future.jpg\" alt=\"Google Polymer - Future of HTML5\" style=\"width: 60%;\" />\n<img src=\"/blog/Google_Polymer_logo.png\" alt=\"Google Polymer - Logo\" style=\"width: 60%;\" />\n\nNow, we have looked into Material UI, Google Polymer and Web Components. How does this all fit together? Polymer is the embodiment of material design for the web. The Polymer team works closely with the design teams behind material design. In fact, Polymer has played a key role in material design's development. It was used to quickly prototype and iterate on design concepts. Watch this next video where Eric Bidelman speaks about how web components are a complete game changer and how this revolution will make developers more productive and reduce the cognitive load of being a Web Developer.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8OJ7ih8EE7s\" frameborder=\"0\" allowfullscreen></iframe>\n\nTill this point, we now have a clear understanding of the Material UI, Google Polymer and Web Components. Now let's get a brief overview of what components does Polymer offer the web developers. Watch this next video again from Google I/O 2014 by Rob Dodson.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HKrYfrAzqFA\" frameborder=\"0\" allowfullscreen></iframe>\n\nHope you are all excited by now to try your hands at Google Polymer and embark on a new design jouney with Google's Material UI. I will soon be sharing sample codes on how to use the various components of Google Polymer - that means there is more fun on the way! Stay tuned!\n",
    "iso8601Date": "2014-07-10T03:40:00-07:00",
    "basename": "2014-07-10-material-ui-google-polymer-web"
  },
  "2014-07-11-celebrating-200k-visitors": {
    "layout": "post",
    "title": "Celebrating 200K visitors!",
    "date": "2014-07-11T03:08:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "jashan",
      "200000",
      "200K",
      "200K blog hits",
      "celebrating 200K visitors"
    ],
    "modified_time": "2014-07-11T03:08:35.579-07:00",
    "photo_url": "/blog/200K.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-4131801122633037526",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/07/celebrating-200k-visitors.html",
    "preview": "I’m so excited that I have finally reached this milestone. **200K …",
    "content": "\n\nI’m so excited that I have finally reached this milestone. **200K blog hits**! 🙌 🎉 🎈🎈🎈 Yes, we have crossed 200K visits. I never thought when I started this blog in November, 2010 that I would have much to offer that people would appreciate so much. But today with more than 200,000 page views, more than 500 followers and several Likes and +1s the response to this blog has been nothing short of amazing. Now I have the added responsibility of contributing better code samples and better articles.\n\nI would like to thank all visitors and members for making this blog successful. I am so happy to have readers such as you. Thank you all who have been reading. If you are a regular reader, or if you just dropped by today, do comment and tell me what you liked about the blog!\n",
    "iso8601Date": "2014-07-11T03:08:00-07:00",
    "basename": "2014-07-11-celebrating-200k-visitors"
  },
  "2014-07-31-setting-up-sandbox-for-google-polymer": {
    "layout": "post",
    "title": "Setting up a Sandbox for Google Polymer",
    "date": "2014-07-31T05:45:00.000-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "Google Polymer",
      "Google Polymer Sand-box",
      "setting up Google Polymer",
      "Implementing Google Polymer"
    ],
    "modified_time": "2014-07-31T05:45:22.258-07:00",
    "photo_url": "/blog/The_UI_Dev_Default.png",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-8916566660383793885",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/07/setting-up-sandbox-for-google-polymer.html",
    "preview": "In the last article, we got introduced to [Google …",
    "content": "\n\nIn the last article, we got introduced to [Google Polymer](https://theuidev.github.io/material-ui-google-polymer-web.html) which implements Google's Material Design for the web. Google Polymer is based on the concept of Web Components and provides users with 2 types of components that can be readily utilized - the **Polymer Core Elements** and the **Paper Elements**.\n\nPolymer's core elements are a set of visual and non-visual utility elements. They include elements for working with the layout, user input, selection and scaffolding apps.\n\n<img src=\"/blog/Googe_Polymer.png\" alt=\"Google Polymer Paper Elements\" style=\"width: 60%;\" />\n\nPolymer's paper elements collection implements material design for the web. They are a set of highly visual, highly interactive elements that includes things like controls, layout, hero transitions and scrolling effects.\n\n<img src=\"/blog/Google_Polymer_Checkbox.png\" alt=\"Google Polymer Paper Elements Checkbox\" style=\"width: 60%;\" />\n\nBefore we start implementing the Google Polymer Elements, we need to set up a sandbox to try out Google Polymer on our local systems. Follow the steps below and you can successfully set up your Google Polymer sandbox.\n\n## Steps to set-up Google Polymer Sand-box\n1. Download the [official zip file](http://www.polymer-project.org/docs/start/getting-the-code.html) of Polymer Paper Elements.\n2. When you download a component or components (we are downloading the entire components set for development) as a zip file, you get all of the dependencies bundled into a single archive. You need not install any additional tools.\n3. Extract the zip and add the folder to your local web servers home/htdocs folder.\n4. That's all that you have to do to get Google Polymer components and set it up on your local system. 🙌\n\nYou need to set the paths of the platform js file, the Roboto font and paper-elements html in the head section. Refer to the code below to get an idea.\n\n```javascript\n<script src=\"components/bower_components/platform/platform.js\"></script>\n<link href=\"components/bower_components/font-roboto/roboto.html\" rel=\"import\" />\n<link rel=\"import\" href=\"components/bower_components/paper-elements/paper-elements.html\" />\n```\n\nDo not worry about the code above as of now. We will take a look at it in detail from the next post onward, where we take a look at each Paper Element in detail. Stay tuned for the fun!\n",
    "iso8601Date": "2014-07-31T05:45:00-07:00",
    "basename": "2014-07-31-setting-up-sandbox-for-google-polymer"
  },
  "2014-08-12-the-bitter-divorce-of-psd-and-html": {
    "layout": "post",
    "title": "The bitter divorce of PSD and HTML",
    "date": "2014-08-12T00:43:00.003-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "photoshop to HTML",
      "Adobe Photoshop",
      "Photoshop assets",
      "PSD to HTML",
      "death of PSD",
      "the divorce of PSD and HTML",
      "HTML5"
    ],
    "modified_time": "2014-08-12T00:43:52.233-07:00",
    "photo_url": "/blog/The_UI_Dev_Default.png",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-6798614446307213344",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/08/the-bitter-divorce-of-psd-and-html.html",
    "preview": "Today's article is based on an interesting post that I read. The …",
    "content": "\n\nToday's article is based on an interesting post that I read. The original post is in Portuguese and authored by [Fabricio Teixeira](https://www.linkedin.com/in/fabricioteixeira) and can be found at [arquiteturadeinformacao](http://arquiteturadeinformacao.com/) (Now don't ask me pronounce this 😏 😊).\n\n![Photoshop export tool](/blog/Photoshop_Export.jpg)\n\nSome are calling it the death of **PSD**, but let's not get that harsh! I prefer calling it a \"divorce\". PSD and HTML are both healthy and living strong, just that they do not live together anymore. 💔 \"PSD to HTML\", which for years was the most accurate and sometimes the only right path to web design process, seems like has its days counted. 🥀 🥀\n\nFirstly you draw a page in Photoshop; impeccable layout, representing exactly how the web pages would appear when opened in a browser. After a sign-off on this picture (PSD) from the client the front end developer transforms these pictures into HTML, CSS and Javascript. The assets are cut, one by one, exported from the PSD and integrated into the HTML. Plugins and new tools are created in the process and some companies even charge upto $100 to do this process for you.\n\nAs articulated by Nick Pettit on the [Treehouse Blog](http://blog.teamtreehouse.com/psd-to-html-is-dead), PSD to HTML is a process that makes perfect sense at first glance. It can be a difficult process to start working on the development of a web page without knowing exactly how the designers hope to get the final result. Experience in PSD first and then create a final product seems to be a very reasonable process. 🤷‍♂️\n\nIt turns out that the scenario has changed considerably in recent years. The direction in which the web design is heading brings some aspects that make this process of PSD to HTML to start getting outdated. Some major changes that can be noticed include the following.\n\n## Design in CSS\nAfter CSS3, many of the visual effects that were earlier achieved only with the tools of Photoshop (shadow, rounded corners and gradients among many others) started becoming available by mere use of CSS code. Previously, if a box had rounded corners, then the developer had to export the edges as images and make them fit to the pixel. Most modern browsers now support the CSS to implement this. Rare are the scenarios where we still have to support the troublesome Internet Explorer. 🤢 🤢\n\n## CSS Based Frameworks\nWith CSS frameworks like Bootstrap and Foundation becoming popular, most commonly used components are shipped as part of the framework itself. This reduces the dependancy on Photoshop designs all-together and most developers design their own sites without a PSD which is fast and effective 💨\n\n## Responsive Design\nIf you are a front end web developer, you are pretty much aware of the challenges involved in designing websites that run on all resolutions available in the market - especially after the rise of smart phones, tablets, phablets and the chaos by the lack of standardization of the screen sizes by the manufacturers of these devices. The Responsive Design comes as a very effective solution to these problems. If you consider the example of rounded corners on buttons again, it is almost impossible to make these fit perfectly on all resolutions available in the market and it deceives those who think that its ok to support the 3 or 4 most common breakpoints and chuck the rest.\n\n<img src=\"/blog/Screen_Sizes.png\" alt=\"Screen Size comparision\" style=\"width: 60%;\" />\n\n## Flat Design\nWith the trend of flat design setting in, interfaces without much shadow, bevel, emboss and all that jazz allow more and more sites to be designed using CSS alone using images for photos and specific backgrounds only. This has resulted into greatly reduced use of Photoshop visual effects.  \n\n## Market Maturity\nOver the years, the web design industry has matured significantly. Designers and developers have begun to learn what works well and avoid what does not. In most companies, designers are expected to have an accurate knowledge of what is achievable with the currently available technologies. No crazy solution is proposed which hasn't been tried and tested earlier.\n\n## Does that mean Photoshop is dead?\nNo. Definitely not. Photoshop is still very important in web design. However, it is now more of a sketchbook than an actual step in the process of web development. Designers test solutions in Photoshop to determine the harmony of the page and display the visual identity for customers and other stakeholders. The layout also serves as a discussion tool for everyone to come to a consensus on the look that the product should have.\n\n### Update: 2018\nI think Photoshop is dead in the web development flow. No one uses it anymore! The industry has moved over to sketching tools, that help teams to get to a design consensus.\n\n## Designing in the browser\nBrad Frost is one of the programmers who has captured this shift in thinking. According to him, the best way to design a website in a browser is to get the developer to code on the same day the designer starts thinking on the branding. Below is a interview in which he tells a bit about the process that he usually applies in the projects he participates in.\n\n<div><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"//www.youtube.com/embed/5J7mq0ogwBI\" width=\"560\"></iframe></div>\n\nThis is how the sketch board looks now a days for the developers while the designers create the branding for the customer.\n\n<img src=\"/blog/Sketch_Board.png\" alt=\"Sketch Board\" style=\"width: 60%;\" />\n\nThis is how a once popular and sometimes the only method to generate good functioning web pages is slowly and steadily making way for a more developer oriented web development with little to no dependency on Photoshop assets and layouts.\n",
    "iso8601Date": "2014-08-12T00:43:00-07:00",
    "basename": "2014-08-12-the-bitter-divorce-of-psd-and-html"
  },
  "2014-12-20-merry-christmas": {
    "layout": "post",
    "title": "Merry Christmas",
    "date": "2014-12-20T20:59:00.001-08:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "holiday season",
      "christmas greetings",
      "merry christmas",
      "christmas message"
    ],
    "modified_time": "2014-12-20T20:59:41.492-08:00",
    "photo_url": "/blog/merry_christmas.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-4991134532783076761",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/12/merry-christmas.html",
    "preview": "Hello everyone! Its been a long time since I last wrote. Got real …",
    "content": "\n\nHello everyone! Its been a long time since I last wrote. Got real busy with some exciting projects and exciting opportunities. It has been a crazy and really exciting and knowledgeable journey this year. Hope you all had a great year and are looking forward to the holiday season! I wanted to take this opportunity to wish you all a very happy Christmas! 🎄🎅🏻 🎁\n\nAs you all relish the goodies, decorate every nook and corner of your home and enjoy the get-togethers, may the joy and festivities continue to radiate in your lives, long after Christmas is gone! Stay safe, enjoy the holidays and get refreshed to join me on an enriching journey in the new year! I'll make sure that I write consistently and write about new things I learn.\n\nSigning off for the holiday season! 🍷🍷\n\n<img src=\"/blog/merry_christmas.jpg\" alt=\"Merry Christmas 2014\" style=\"width: 60%;\" />\n",
    "iso8601Date": "2014-12-20T20:59:00-08:00",
    "basename": "2014-12-20-merry-christmas"
  },
  "2014-12-27-annual-retrospective-welcome-to-new": {
    "layout": "post",
    "title": "Annual Retrospective - Welcome to the new year 2015!",
    "date": "2014-12-27T20:10:00.001-08:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "new year post",
      "new year wishes",
      "happy new year 2015"
    ],
    "modified_time": "2014-12-27T20:10:24.481-08:00",
    "photo_url": "/blog/Retro_2014.png",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3669085610893921458",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2014/12/annual-retrospective-welcome-to-new.html",
    "preview": "The curtains are about to fall and another year will have gone by. A …",
    "content": "\n\nThe curtains are about to fall and another year will have gone by. A brief interval, the curtains go up and we would be looking forward to the next year - **2015**! 🎊 This past year, I wrote comparatively few posts, but some really good ones. Though I have shared a few posts this year round, I have learned new things and techniques this year. I have upgraded my skills and am looking forward to put these to use in the new year and share new things with you all.\n\nI did a retrospective of what I shared during the last year and the data has revealed the top-shared and read posts over the last year. I present to you the top 5 posts of the last year.\n\n* [Exploring Jquery Mobile 1.4.0](https://theuidev.github.io/exploring-jquery-mobile-140)\n* [Material UI, Google Polymer & Web Components](https://theuidev.github.io/material-ui-google-polymer-web/)\n* [Difference between word-break: break-all versus word-wrap: break-word](https://theuidev.github.io/difference-between-word-break-break-all/)\n* [The bitter divorce of PSD and HTML](https://theuidev.github.io/the-bitter-divorce-of-psd-and-html/)\n* [Setting up a Sandbox for Google Polymer](https://theuidev.github.io/setting-up-sandbox-for-google-polymer/)\n\nThis year ~~[Spatial Unlimited](http://shreerangpatwardhan.blogspot.com/)~~ [The UI Dev](https://theuidev.github.io) crossed the 300K visits mark. 🙌🏻 All thanks to you readers and all of you who wanted to learn something new and liked what I shared. A heart felt thank you to all of you readers! Keep reading and giving your feedback. I also have set up a [Facebook page](https://www.facebook.com/SpatialUnlimited) for ~~Spatial Unlimited~~ The UI Dev and you can stay connected with me here as well. You can share new things on this page, ask questions and we can try to find solutions to some problems and issues in front-end web development together.\n\n<div style=\"text-align: center;\"><iframe allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" src=\"//www.facebook.com/plugins/likebox.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FSpatial-Unlimited%2F185149371538692&amp;width=250&amp;height=258&amp;colorscheme=light&amp;show_faces=true&amp;border_color&amp;stream=false&amp;header=false&amp;appId=213800168655901\" style=\"border: none; height: 258px; overflow: hidden; width: 250px;\"></iframe></div>\n\nSo far I have been writing from India 🇮🇳 and now am writing from a new postal address in USA 🇺🇸. It's a new year, new techniques, new skills and a new place. A perfect recipe to share some great techniques and articles with the community. Things are looking bright and I am hoping to write more this year! Hope you all had a great year too and wish you all a very happy new year 2015! Stay tuned for more updates and new things. See you in the new year!\n",
    "iso8601Date": "2014-12-27T20:10:00-08:00",
    "basename": "2014-12-27-annual-retrospective-welcome-to-new"
  },
  "2015-08-12-mastering-jquery-mobile": {
    "layout": "post",
    "title": "How I authored a technical book?",
    "date": "2015-08-12T00:07:00.003-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "packt publishing",
      "technical book",
      "shreerang patwardhan",
      "technical author",
      "chip lambert",
      "mastering jquery mobile"
    ],
    "modified_time": "2015-08-16T10:07:13.319-07:00",
    "photo_url": "/blog/Book_Cover_Full.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-8626447506772175687",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2015/08/mastering-jquery-mobile.html",
    "preview": "Here is the reason why I have not been writing over the last 6-8 …",
    "content": "\n\nHere is the reason why I have not been writing over the last 6-8 months! I was busy writing my first book - **Mastering jQuery Mobile** with [Chip Lambert](https://twitter.com/chiplambert) and what better subject to choose than jQuery Mobile. I have been extremely lucky to get the opportunity to author a book with Chip.\n\nThis project started off about a year back, when I was approached by [Packt Publishing](https://www.packtpub.com/web-development/mastering-jquery-mobile) to review this book that was being written by Chip. I instantly grabbed this opportunity, as I was getting a chance to review some work on a framework that I totally love. Chip had about 4 chapters complete at this time and I had provided my comments on the content of these chapters to the best of my knowledge. I was waiting for the further chapters, when I fine morning, I received a mail from the content editor of the book...\n\nI thought that it would be the next chapter for review. But nope! It was him asking me if I would like to author this book with Chip, to speed up the process as Chip had fallen ill. Now this was a big decision to make, so many unknowns, the original code was not written by me, I did not know what was going to be a part of the further chapters, so basically I would be completely shooting in the dark! I brought up these things with the publisher and I was assured that the on-boarding process would be made very smooth. I finally decided to take the plunge!\n\nOver the next month, I received a whole lot of documents and the contract was signed between the publisher and myself. The work began. We split the pending work between Chip and myself and started working on our parts. The process went through several discussions and delays between managing our work and completing this project. However, we were able to complete the first drafts of all chapters of the book in the month of June.\n\nThis was followed by proof-readings and error checks and then a couple of rounds of reviews and then finally the book was uploaded to the printers. The book was finally published on July 31, 2015. The book is now available for purchase at [Amazon](http://amzn.com/178355908X). In case you wish to purchase your copy or copies in bulk, you can reach me and we can figure out some discount on the total price based on the number of copies needed. If you already have purchased a copy, please take a moment to give us a review on Amazon.\n\nI also signed my first copy and that was such an awesome moment. Never in my life had I dreamt of writing a book, leave alone signing one as an author. But it happened when one of my colleague bought a copy and asked me to sign it for him.\n\n<img src=\"/blog/Book_Signed_Copy.jpg\" alt=\"Signed copy of book\" style=\"width: 60%\" />\n\nHope you enjoy the book and learn enough from it, as much as we enjoyed working on it and getting it out to you all...\n",
    "iso8601Date": "2015-08-12T00:07:00-07:00",
    "basename": "2015-08-12-mastering-jquery-mobile"
  },
  "2015-09-02-finally-question-is-answered": {
    "layout": "post",
    "title": "Finally the question is answered!",
    "date": "2015-09-02T17:13:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "cover picture",
      "tiger",
      "book cover",
      "cover photo",
      "book publishing",
      "tiger cub",
      "amazon deals",
      "technical book cover",
      "technical author",
      "book signing",
      "mastering jquery mobile",
      "packt"
    ],
    "modified_time": "2015-09-02T17:13:52.794-07:00",
    "photo_url": "/blog/Book_Cover.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-2420581622994993495",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2015/09/finally-question-is-answered.html",
    "preview": "In today's post I will finally answer a burning question that I have …",
    "content": "\n\nIn today's post I will finally answer a burning question that I have been asked several times by several people over the last month. Most of you all are aware that my first technical book - **[Mastering jQuery Mobile](http://amzn.com/178355908X)** got published last month. I received several questions from people asking me how I did it? How did I get a chance and so many more, but the question that almost everyone asked me was \"**Why do you have a picture of a tiger on your cover**\"? 😂 😂\n\n<img src=\"/blog/Book_Cover.jpg\" alt=\"Book Cover\" style=\"width: 45%;\">\n\nInitially, I just answered saying it was chosen by my publishers Packt, but then people started getting more serious about the issue. People started raising other questions like did you have any other options, was there any sort market survey involved, any behavioral analysis and so on and so forth. This really wasn't what I had expected! 😮 😮\n\nSo, finally I decided to find an answer to this burning question and now here it is! Yes, we had 3 options other than the Tiger cub which you can see below. The image of the Tiger cub was picked by my co-author [Chip Lambert](https://twitter.com/chiplambert)'s sweet little daughter and so we stuck to it and I must say that she has a pretty good choice.👌\n\n<img src=\"/blog/Cover_Option_1.jpg\" alt=\"Book Cover Option #1\" style=\"width: 45%\" />\n\n<img src=\"/blog/Cover_Option_2.jpg\" alt=\"Book Cover Option #2\" style=\"width: 45%\" />\n\n<img src=\"/blog/Cover_Option_3.jpg\" alt=\"Book Cover Option #3\" style=\"width: 45%\" />\n\nI would also like to answer another question that I am sure some people will raise on this, which is, why were these 4 images shortlisted. This is because Packt has a set of images based on a series of books. So when the cover picture for our book was selected over a year back, these were the images that were available. If it were to be selected today, we would have some flower image as our cover picture.\n\nHope this answers the big question about our book - \"Why is there a Tiger cub on your book cover\" and hope you have enjoyed the post. 😀 In case you wish to order discounted copies of our book please get in touch with me and I can arrange them for you.\n",
    "iso8601Date": "2015-09-02T17:13:00-07:00",
    "basename": "2015-09-02-finally-question-is-answered"
  },
  "2016-02-05-better-late-than-never": {
    "layout": "post",
    "title": "Better Late, Than Never",
    "date": "2016-02-05T19:09:00.000-08:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "whats the status of jquery mobile",
      "jquery mobile 1.5",
      "is jquery mobile dead",
      "jquery mobile updates",
      "jquery mobile status"
    ],
    "modified_time": "2016-02-05T19:09:02.572-08:00",
    "photo_url": "/blog/jQM Meme.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-6128195410181811972",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2016/02/better-late-than-never.html",
    "preview": "A huge announcement from the members of the jQuery Mobile …",
    "content": "\n\nA huge announcement from the members of the jQuery Mobile development team came in late last week! Amongst huge speculations that the extremely popular jQuery Mobile project was not being worked upon and that there would be no more versions or updates, the jQuery Mobile team lead has announced that the project is pretty much alive and being worked on!\n\n<img src=\"/blog/jQM Meme.jpg\" alt=\"Meme 1\" style=\"width:40%\" />\n\nWhat a huge sigh of relief for jQuery Mobile lovers like myself! They are working on the next version of jQuery Mobile - 1.5 and though they have not committed on a final date of release, it is pretty certain that the newest version of the popular mobile web framework will soon see the light of day. There are some pretty huge things happening on the jQuery Mobile project and you can read the original [blog post](http://blog.jquerymobile.com/2016/01/28/a-long-overdue-status-update/) on the jQuery Mobile website. If you want the highlights, continue to read on!\n\n* jQuery UI and jQuery Mobile will now share components. jQuery Mobile now shares the new and improved jQuery UI core. This clearly means that, all the developers out there who wanted to consume the jQuery UI components or widgets into jQuery Mobile web applications, will now have it ready out of the box.\n* The upcoming version v1.5 will not have all the jQuery UI widgets, but will eventually have complete integration.\n* jQuery Mobile will finally have in-built support for draggable, droppable and sortable from jQuery UI.\n* The work on auto-enhancement that began in 1.4 continues in the new version too, with data-role becoming it's own stand alone module.\n* The love story with jQuery UI continues - The 2 projects are merging their testing infrastructure too.\n* In the future, not in v1.5, the 2 projects will also merge their efforts to build a common theme and theme roller.\n* jQuery Mobile is taking a huge step towards improving their touch support. To this end, they will be teaming up with the very popular Hammer,js library and also joining efforts with Pointer Events Polyfill (PEP).\n* A huge step in browser support. The framework will no longer support the older browsers and older OS versions. The framework will now be supporting the recent and the latest browsers and mobile OS versions.\n* In the upcoming version, no workarounds or bug fixes for these older browsers and older OS versions, would be removed, but moving towards v1.6 these things would be removed. This clearly means that jQuery Mobile will be losing some weight and will be getting much lean and healthier 👍🏼\n\n<img src=\"/blog/jQM Meme 2.jpg\" alt=\"Meme 2\" style=\"width:40%\" />\n\nThis gives us a clear idea that jQuery Mobile is working towards making huge improvements to the framework and we can expect to see huge changes in the upcoming versions. Keep your excitement up and following the jQuery Mobile framework.\n",
    "iso8601Date": "2016-02-05T19:09:00-08:00",
    "basename": "2016-02-05-better-late-than-never"
  },
  "2016-02-06-stay-selfish-stay-accessible": {
    "layout": "post",
    "title": "Stay Selfish, Stay Accessible",
    "date": "2016-02-06T15:46:00.001-08:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "accessible web",
      "section 508",
      "HTML5 aria",
      "jquery mobile aria",
      "implementing web accessibility",
      "web accessibility",
      "a11y",
      "aria",
      "aria attributes"
    ],
    "modified_time": "2016-02-06T15:46:34.790-08:00",
    "photo_url": "/blog/Web_Accessibility_Meme1.jpeg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-5689052993690237859",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2016/02/stay-selfish-stay-accessible.html",
    "preview": "A lot of you would have heard of **Web Accessibility**, **Section …",
    "content": "\n\nA lot of you would have heard of **Web Accessibility**, **Section 508**, **a11y**, **Aria** and more of this jargon at your workplace and especially if you are on the UI/UX team in your organization. It might have sounded confusing, a burden and just unnecessary to implement. You would also come across a large number of managers and developers in your organization who are completely unaware of this concept of web accessibility, and so in this article today, we will take a look at what web accessibility is, why it needs to be implemented and what it means for you.\n\n>Web Accessibility refers to the process of making the web accessible to people with different disabilities, thereby removing the barriers that prevent their interaction with or access to websites.\n\nJust bring up the topic of implementing web accessibility on your project and some of the immediate challenges/questions that you will get apart from the \"There are more pressing issues at hand! Focus on that!\" looks 🤷🏽‍🤷‍♂️ are listed below.\n\n<img src=\"/blog/Web_Accessibility_Meme1.jpeg\" alt=\"Reading_issue_Meme\" style=\"width: 40%;\" />\n\n1. Will it impact business? 🗯️ (```Hidden meaning``` - How many disabled people would actually be using our website?)\n2. How much would it cost? 🗯️ (```Hidden meaning``` - Is it really worth the effort to implement web accessibility? We already have a huge backlog of features to be implemented!)\n3. And finally... Why should I as a developer or an organization do it at all? 🗯️\n\nWe will look at some statistics and data that will give us an answer to all of the above questions, but most importantly, I will try to answer, “**Why should we implement web accessibility?**”\n\nYou will find a whole range of different disabilities that inhibit people from accessing the web and these were considered by the [WCAG](https://www.w3.org/WAI/intro/wcag) when they laid out the standards for implementing web accessibility, and we should definitely make the web accessible for these differently abled users of our website. In the US alone - whose population is approximately 4.4% of the total world population,\n* 10.4% of the web users aged between 21-64 years\n* 25% aged between 65-74 years\n* 50% aged 75+ years\n\nsuffer from visual, hearing, mobility or cognitive disabilities.\n\nThese statistics display the magnitude of users that can be targeted, but the numbers don't matter, until I provide some practical examples. So, let’s keep all of these stats and the data aside for a minute, and think about you and me - supposedly the better-abled individuals (for the lack of a better term), whose lives are driven by technology. We use the web, all throughout our day to socialize, navigate to different places and more importantly browse information.\n\nMost of us wear far-sight corrective spectacles/ lenses throughout the day. Try reading the following line without your glasses on. 👓\n\n<p style=\"text-align: center;\"><span style=\"font-size: xx-small;\">This small font size makes it extremely difficult to read the text.</span></p>\n\n🔍 You would have found it extremely difficult to read that text and some would not have been able to read it as well. This is because you just have a minor vision disability. Can you think of someone who just had a surgery in one eye and was complaining about not being able to browse your website with ease? Think about the frustration you would feel if you had to just read through a website that has such small text without your glasses on!\n\n<img src=\"/blog/Web_Accessibility_Meme2.jpeg\" alt=\"Reading_issue_Meme\" style=\"width: 40%;\" />\n\nImagine a situation that you are in an accident and have fractured your mouse hand. 🤕 How difficult would it become for you to use the mouse to navigate through a website. Leave alone navigate, you would not even be able to hold the mouse. Another situation would be, when you get partial deafness because of some bacterial infection. You would be able to view your favorite videos on Youtube but not be able to listen to what is going on. Imagine the amount of frustration you would go through.\n\nAll these cases are of temporary, partial disabilities and these affect you and me – the currently abled users of the web. Think about the older you, when you have reached your late 60s and 70s, when you might suffer from multiple disabilities relating to your motor skills, hearing impairment and vision impairment among several others.\n\nDisabilities are not the only reason why web accessibility should be implemented. Think of a situation when you are eating your lunch, enjoying your hamburger 🍔, at your desk and start navigating a website using the keyboard alone. This is a situational disability or impairment and you would be frustrated if you could not navigate through the website using just your keyboard.\n\n<img src=\"/blog/Web_Accessibility_Meme3.jpeg\" alt=\"Reading_issue_Meme\" style=\"width: 40%;\" />\n\nThis is the main reason why you should implement and support web accessibility in your organization and on your projects. Supporting web accessibility now helps the injured you, the encumbered you and also the future older you. Investing in and implementing accessibility is not just for the disabled. It is for you and me; it’s for our future. Be selfish! Do it for yourself and no one else! **Stay Selfish, Stay Accessible!**\n\nThis article is inspired by a talk given by [Adrian Roselli](https://twitter.com/aardrian) – a proponent of the theory of “Selfish Accessibility”.\n",
    "iso8601Date": "2016-02-06T15:46:00-08:00",
    "basename": "2016-02-06-stay-selfish-stay-accessible"
  },
  "2016-02-07-looks-do-matter": {
    "layout": "post",
    "title": "Looks do matter",
    "date": "2016-02-07T14:43:00.000-08:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "jquery mobile theme. jquery mobile themes",
      "jquery mobile themes collection",
      "top 5 jquery mobile themes"
    ],
    "modified_time": "2016-02-07T14:43:02.702-08:00",
    "photo_url": "/blog/jQM_Theme_Meme.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3944186990894639834",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2016/02/looks-do-matter.html",
    "preview": "jQuery Mobile is great, offers great features! With the [new and …",
    "content": "\n\njQuery Mobile is great, offers great features! With the [new and upcoming version](/jquery-mobiles-next-big-step/) of this mobile web framework, we will have access to more out-of-the-box widgets and some brilliant features coming our way! With hammer.js and PEP integrations round the corner, we will have more gesture support in the upcoming versions. With so much great features, developers are still hesitant on choosing this mobile framework for the sole reason that the UI doesn't look great! Well, this is true and the default UI does look a little out of date and does not match up to the latest UI trends! As a result of this, we will take a look at some of the most popular themes that you can use on your jQuery Mobile project. ❤️\n\n### [Material design theme - NativeDroid](http://nativedroid.godesign.ch/material/)\n\n### [Flat UI theme](http://ququplay.github.io/jquery-mobile-flat-ui-theme/)\n\n### [Graphite theme](http://driftyco.github.io/graphite/)\n\n### [jQuery Mobile RTL theme](http://www.intlaqa.com/jquery-mobile-rtl/)\n\n### [jQuery Mobile Bootstrap theme](http://andymatthews.net/code/jQuery-Mobile-Bootstrap-Theme/forms.html)\n\nHope you enjoy this collection of jQuery Mobile themes and this resolves the bad UI problem of your jQuery Mobile project. Do not forget to suggest more such themes if you have used any on you projects!\n",
    "iso8601Date": "2016-02-07T14:43:00-08:00",
    "basename": "2016-02-07-looks-do-matter"
  },
  "2017-01-01-happy-new-year-2017": {
    "layout": "post",
    "title": "Happy New Year 2017",
    "date": "2017-01-01T14:05:00.000-08:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "new year wishes",
      "happy new year",
      "2017"
    ],
    "modified_time": "2017-01-01T14:05:13.622-08:00",
    "photo_url": "/blog/New_Year_2017.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3231321601721076300",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/01/happy-new-year-2017.html",
    "preview": "As the last working day of 2016 came to an end last Friday, the …",
    "content": "\n\nAs the last working day of 2016 came to an end last Friday, the office floors wore a deserted look and every heart filled with the spirit of the new year was making plans to welcome the new year! This is the time, when everyone sits back, takes a break from all their routine work and looks forward to a new opportunity, a new day and new year of learning.\n\nToday on the first day of this new year 2017, I wish everyone a very happy and a prosperous new year! Love more, learn more! Be safe, be happy!\n\n![Happy New Year 2017](/blog/New_Year_2017.jpg)\n",
    "iso8601Date": "2017-01-01T14:05:00-08:00",
    "basename": "2017-01-01-happy-new-year-2017"
  },
  "2017-05-19-jquery-mobiles-next-big-step": {
    "layout": "post",
    "title": "jQuery Mobile's Next Big Step",
    "date": "2017-05-19T18:03:00.000-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "Jquery Mobile",
      "jqm"
    ],
    "modified_time": "2017-05-19T18:03:55.299-07:00",
    "photo_url": "/blog/jQuery_Back.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-1063455475720760559",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/05/jquery-mobiles-next-big-step.html",
    "preview": "A huge shout out to the jQuery Mobile team for releasing **jQuery …",
    "content": "\n\nA huge shout out to the jQuery Mobile team for releasing **jQuery Mobile 1.5.0-alpha.1**. 💗 This has been long overdue. This release is huge - Tons of issues fixed, integration with jQueryUI and a bunch of new and re-written widgets. In their own words - \"We have closed and fixed hundreds of bugs getting to our lowest bug count since the initial release of jQuery Mobile!\" That's how big the release is! Take a look at the [Dev Demos](http://demos.jquerymobile.com/1.5.0-alpha.1/) they have hosted!\n\nThe new and improved jQuery Mobile looks so much more better than it's predecessors. Give it a try and poke around. It's time to upgrade soon. Some of the major changes are listed below.\n\n## Modularized code 😌\nEntire code is now modularized so that you can now include only the code that you need in your jQuery Mobile application. This should make your application lighter.\n\n## NPM Support 😌\nNPM support is finally here. The jQuery Mobile [npm-package](https://www.npmjs.com/package/jquery-mobile) is now completely owned and maintained by the jQuery Mobile team.\n\n## Bug Fixes 😊\nLike I have previously mentioned, the jQuery Mobile team and closed and fixed hundreds of bugs which means we have the most stable alpha release yet! Kudos team!\n\n## jQuery 3.x support 😌\nPhew! jQuery 3.x is now officially supported! Finally!\n\n## IE is not smiling and so is Android 😊\n<img src=\"/blog/Sad_IE.jpg\" alt=\"IE Meme image\" style=\"width: 40%;\" />\nThis latest version of jQuery Mobile now officially drops support for IE10 and below and Android 4.4 and below!\n\n## New Widgets (Integration with jQueryUI) 😊\nThis is probably one of the biggest feature of this release. jQuery Mobile's love affair with jQueryUI finally begins! Controlgroup, checkboxradio and button widgets have been incorporated from jQueryUI. The accordion widget has replaced the traditional collapsible and collapsible set widgets. These two widgets have been deprecated. Personally; I don't like this at all! This is going to make the framework slower. In an age when you are facing competition from likes of Vue, Preact, Marko and Ratchet; I mean - come on jQuery UI!\n\n## Re-written widgets 😊\nCouple of existing widgets - the navbar and table have been written from scratch to include new features, performance and modularization improvements.\n\nWith all these changes and a new, cleaner, smoother look, jQuery Mobile seems like it might survive the tough competition it is receiving from its competitors. What remains to be validated is how performant is this new release of jQuery Mobile. In the times when millions of pages are being AMPlified every single day, would jQuery Mobile survive this heat? Let's check how the adoption looks like for this new release and we will soon find out.\n\nUntil next time! Happy weekend everyone. Let me know your thoughts on this new release and if you have tried it out yet!\n",
    "iso8601Date": "2017-05-19T18:03:00-07:00",
    "basename": "2017-05-19-jquery-mobiles-next-big-step"
  },
  "2017-06-19-js-for-loop-code-performance": {
    "layout": "post",
    "title": "JS For Loop Code Performance",
    "date": "2017-06-19T21:43:00.000-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6",
      "for loop",
      "fastest for loop",
      "performance",
      "code improvements",
      "code performance"
    ],
    "modified_time": "2017-06-19T21:43:44.605-07:00",
    "photo_url": "/blog/For_Loop_Performance_Blog.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3693251472270111435",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/06/js-for-loop-code-performance.html",
    "preview": "**Perfomance** 💨 is always the keyword! Every single website strives …",
    "content": "\n\n**Perfomance** 💨 is always the keyword! Every single website strives for being fast - lightning fast! Faster the site, better is the user interaction and better is the conversion. I face this challenge on a daily basis to make sites faster and in the process I ended up testing the 'for' loop with different conditions and I am sharing it here. All observations are a result of running multiple tests for the same set of data.\n\n### Regular For Loop 🔁\n```javascript\nlet products = [{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85}];\nlet arrLen = products.length;\nlet productsArray = [];\n\nlet t0 = performance.now();\n\nfor(let i=0; i<arrLen; i++){\n  productsArray.push({\n    productUPC: products[i].upcNumber,\n    productID: products[i].productInfo.productID,\n    productQuantity: products[i].quantity,\n    productPrice: products[i].retailPrice?products[i].retailPrice:'',\n    productSubTotal: products[i].itemTotal?products[i].itemTotal:'',\n    productName: products[i].productInfo.productDescription\n  })\n}\n\nlet t1 = performance.now();\nconsole.log(\"_ JS took \" + (t1 - t0) + \" milliseconds.\");\n```\nThis is a regular, non-ES6, forward moving for loop which takes anywhere between **0.04 to 0.05 ms**.\n\n### Lodash _.ForEach 🔄\n```javascript\nvar products = [{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85}];\nvar arrLen = products.length;\nvar productsArray = [];\n\nvar t0 = performance.now();\n\n_.forEach(products, function(product){\n\tproductsArray.push({\n  \t\tproductUPC: product.upcNumber,\n\t\tproductID: product.productInfo.productID,\n\t\tproductQuantity: product.quantity,\n\t\tproductPrice: product.retailPrice?product.retailPrice:'',\n\t\tproductSubTotal: product.itemTotal?product.itemTotal:'',\n\t\tproductName: product.productInfo.productDescription\n\t})\n});\n\nvar t1 = performance.now();\nconsole.log(\"_ JS took \" + (t1 - t0) + \" milliseconds.\");\n```\nThis is the lodash version of the for loop (_.ForEach) takes anywhere between **0.18 to 0.21 ms**.\n\n### ES6 for loops\nI did a forward iterating and a reverse iterating for loop too and I noticed dramatic improvements in performance.\n\n#### Forward iterating ES6 for loop 🔄\n```javascript\nlet products = [{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85}];\nlet arrLen = products.length;\nlet productsArray = [];\n\nlet t0 = performance.now();\n\nfor(let i=0; i<arrLen; i++){\n  productsArray.push({\n    productUPC: products[i].upcNumber,\n    productID: products[i].productInfo.productID,\n    productQuantity: products[i].quantity,\n    productPrice: products[i].retailPrice?products[i].retailPrice:'',\n    productSubTotal: products[i].itemTotal?products[i].itemTotal:'',\n    productName: products[i].productInfo.productDescription\n  })\n}\n\nlet t1 = performance.now();\nconsole.log(\"_ JS took \" + (t1 - t0) + \" milliseconds.\");\n```\nThis is a regular for loop using ES6 syntax which included 'let' instead of 'var' for variable declaration. The performance improvements here were just amazing. It took about **0.035 to 0.06ms** to execute this for loop.\n\n#### Reverse iterating ES6 For Loop 💨\n```javascript\nlet products = [{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85},{\"itemTotal\":85,\"originalPrice\":85,\"pickUpFromStore\":false,\"quantity\":1,\"retailPrice\":85,\"siteAvailablilityFlag\":true,\"productId\":2112123827,\"upcId\":34046523123,\"upcNumber\":\"86279088208xs\",\"productInfo\":{\"basePriceType\":0,\"maxQuantity\":6,\"onSale\":false,\"productAvailable\":true,\"productDescription\":\"Some Product Name\",\"productID\":2112827,\"productStockAvailability\":\"2\",\"primaryImageName\":\"2725839as.fpx\",\"defaultCategoryId\":3179125,\"lowAvailability\":false,\"brandName\":\"Brand Name\"},\"itemTotalBeforeDiscount\":0,\"retailItemTotal\":85}];\nlet arrLen = products.length;\nlet productsArray = [];\n\nlet t0 = performance.now();\n\nfor(let i=arrLen-1; i<=0; i--){\n  productsArray.push({\n    productUPC: products[i].upcNumber,\n    productID: products[i].productInfo.productID,\n    productQuantity: products[i].quantity,\n    productPrice: products[i].retailPrice?products[i].retailPrice:'',\n    productSubTotal: products[i].itemTotal?products[i].itemTotal:'',\n    productName: products[i].productInfo.productDescription\n  })\n}\n\nlet t1 = performance.now();\nconsole.log(\"_ JS took \" + (t1 - t0) + \" milliseconds.\");\n```\nAs compared to the previous one, I just revered the for loop iteration in this case and the results were extremely good. This for loop took anywhere between **0.004 to 0.009 ms**. This is an amazing improvement over any other loop. Let's tabularize the results so that we can compare it better. 💨\n\n| For Loop Type                  | Time Taken (ms) |\n|--------------------------------|-----------------|\n| Non-ES6 For Loop               | 0.04 - 0.05     |\n| Lodash _.ForEach               | 0.18 - 0.21     |\n| ES6 Forward Iterating For Loop | 0.035 - 0.06    |\n| ES6 Reverse Iterating For Loop | 0.004 - 0.009   |\n\nForm all the tests that I have executed, I believe that the **reverse looping ES6 for loop** is the fastest and is not just fast, it is like the Usain Bolt of For Loops. 🕶️ Do you guys have the same observations or do your tests vary from mine? Which for loop do you prefer? Any faster replacement for the for loop itself? Let me know your thoughts in the comments below.\n\nUntil next time!\n",
    "iso8601Date": "2017-06-19T21:43:00-07:00",
    "basename": "2017-06-19-js-for-loop-code-performance"
  },
  "2017-10-10-es6-101-lexical-declarations-let": {
    "layout": "post",
    "title": "ES6 101 - Lexical Declarations Let",
    "date": "2017-10-10T16:08:00.002-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "variable let",
      "ES6",
      "let variables",
      "ES6 let",
      "let vs var"
    ],
    "modified_time": "2017-10-16T12:48:31.744-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-2325286027191764472",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-lexical-declarations-let.html",
    "preview": "This is the second post in the **ES6** series and we will be …",
    "content": "\n\nThis is the second post in the **ES6** series and we will be covering a lexical declaration - **'Let'** today. Before this we have looked into the [ES6 Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/). We looked at the syntax changes from ES5 to ES6, how ```return``` is implicit and how ```this``` works with the new Arrow syntax.\n\nLet's now look at what ```let``` is. Simply put, ```let``` is the new ```var```. Then what is the difference you ask! well, let's look at right now. Whenever you see ```let``` in your code base, you should now consider the following thing.\n\n1. The scope of the variable declared with the ```let``` keyword is **limited** to the block, statement or expression that it is being used in. This differs from the ```var``` keyword, which defines variables globally or local to a function regardless of block scope.\n\nLet's take a look at a few examples to see how ```var``` and ```let``` differ from each other.\n\n## Examples using ES6 ```let```\n1. ```let``` does not attach anything to ```window``` &#128525;\n```javascript\n    var a = 10;\n    let b = 20;\n    console.log(window.a); // 10\n    console.log(window.b); // undefined\n```\n2. Variables with ```let``` cannot be redeclared &#x1f60d;\n```javascript\n    var a = \"Original Value\";\n    var a = \"Re-declared Value\";\n    console.log(a); // Re-declared Value\n\n    let a = \"Original Value\";\n    let a = \"Re-declared Value\";\n    console.log(a); // Uncaught SyntaxError: Identifier 'a' has already been declared\n```\nThe ```Uncaught SyntaxError: Identifier 'z' has already been declared``` error will come up when you try re-declaring the variable itself. The code will not even reach the ```console.log``` statement.\n\n3. The most important of all things is that the scope of the variable is now **limited** to the block within which the variable is declared.\n```javascript\n    {\n        var a = 10;\n    }\n    {\n        let b = 20;\n    }\n    console.log(a); // 10\n    console.log(b); // Uncaught ReferenceError: b is not defined\n```\nThis error ```Uncaught ReferenceError: b is not defined``` goes to prove that the scope of variable 'b' is not global anymore. If we had to fix the above code, we would have to do the following.\n```javascript\n    {\n        var a = 10;\n    }\n    {\n        let b = 20;\n        console.log(b); // 20\n    }\n    console.log(a); // 10\n```\n\nTo conclude this post, let's look at how we can start using ```let``` in place of ```var``` in our code base today! Identify all the variables that are not global in your code. Replace all these with ```let``` instantly and your code should continue to work. If something breaks, then most probbaly you are using a variable in a way it is not supposed to be used. For all the variables that have been declared globally &#128561;, look into why would you need it and scope them immediately.\n\nI am looking forward to your feedback and a new post in this ES6 series comes tomorrow. Stay tuned! Until then, go change your ```var``` to ```let```.\n",
    "iso8601Date": "2017-10-10T16:08:00-07:00",
    "basename": "2017-10-10-es6-101-lexical-declarations-let"
  },
  "2017-10-10-es6-fat-arrow-functions": {
    "layout": "post",
    "title": "ES6 Fat Arrow Functions",
    "date": "2017-10-10T14:34:00.003-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6",
      "fat arrow functions",
      "arrow functions",
      "ECMAScript2015",
      "es arrows",
      "ES2015",
      "es6 arrow functions"
    ],
    "modified_time": "2017-10-11T14:57:15.023-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-5132122468626234658",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-fat-arrow-functions.html",
    "preview": "I attended a 2 day __ReactJs 101 Training__ last week. Yes! towards …",
    "content": "\n\nI attended a 2 day __ReactJs 101 Training__ last week. Yes! towards the end of 2017 - React 101. That story is for another blog post, but I am happy I took this training. It opened my eyes to a lot of things that I have not been working on and made me realize that I was really falling behind the Javascript scene.\n\nThe main thing that I realized I was lacking was **ES6**. I know a couple of things, but am not using it on a regular basis. One statement by the trainer, especially hit me hard.\n>\"_ES6 has been around for over 2 years now (with babel). There is no reason for you to not use it! If you are not using it today, you are definitely missing the boat!_\"\n\nSo have now decided to start learning something everyday and post it. Share my learnings with the world and get some feedback, if anyone is willing to share some.\n\nI am going to start with the **Arrow Functions** or as they are very commonly referred to as **Fat Arrow Functions**. Whenever someone refers to a Fat Arrow function there are 3 things that should be considered right away!\n\n1. Syntax\nThe **=>** syntax is a short hand syntax for the original function expression. It effectively converts\n```javascript\nfunction (arguments) {\n  expression\n}\n```\nto basically\n```javascript\n  (argumnets) => {expression}\n```\n2. Implicit ```return```\n<br />\nIf an expression is being used after an arrow, the return is implicit, so no return is required. Again we will look at an example soon.\n3. The context of ```this ```\n<br />\nThis is probably the most important offering of the Fat Arrow Functions. ```this ``` is now **lexically** bound to the function. We will look at this in some more detail in the example that follow.\n\n# Fat Arrow Function Examples\n### 1. Fat Arrow Syntax example\nIn the example below we will see how the syntax changes from the previous function expression to fat arrow.\n```javascript\n    // We will cover let in another blog post. If 'let' is making you uncomfortable go ahead\n    // and change it to 'var'\n    let util = {\n        logging: function(val){\n            console.log(val);\n        }\n    }\n    util.logging('Logging from old function syntax.');\n```\nnow will become,\n```javascript\n    let util = {\n        logging: (val) => {\n            console.log(val);\n        }\n    }\n    util.logging('This is logged from the fat arrow function.');\n```\nPretty simple eh!? Yeah right! Now makes me wonder, why I wasn't using this until now! But now I will be writing all my simple functions in this short hand format.\n\n### 2. Implicit ```return```\nThink of all the utility functions that you would have in your code base that ```return``` some value to its caller. Now you can get rid of all those ```return``` statements, because the fat arrow functions have an implicit return value. Let's look at this is action below.\n```javascript\n    function multiple(a,b) {\n        return a*b;\n    }\n    console.log(\"2*5 = \" + multiple(2,5));\n```\nThis will now become,\n```javascript\n    let multiple = (a, b) => a * b;\n    console.log(\"2*5 = \" + multiple(2,5));\n```\nAgain pretty simple! Makes me cry at my ignorance &#128532; The new syntax makes life a breeze.\n\n### 3. Lexical ```this```\nThis is most definitely the most important part of this blog post. How does the fat arrow function treat ```this``` different from the previous function syntax. We will look at it pretty soon, but before that, do you remember all the times when you had to do\n```javascript\n    var that = this;\n    // or\n    var self = this;\n    // or\n    var _this = this;\n    // or\n    .bind(this)\n```\nMade life miserable. We had to do one of the above to really maintain the right context of ```this```. With fat arrow functions, we don't have to do it anymore. These functions maintain a lexical context of ```this```. If you need to understand the different workings of ```this``` I would recommend you read an [awesome article](http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/) on the topic. For the rest, who think they know why we need ```var that = this;```; let's take a look at the example below.\n```javascript\nvar user = {\n    // The data is what it is just because am a cricket fan\n    tournament: \"ICC World Cup\",\n    data: [\n        {name: \"Sachin Tendulkar\", age: 18},\n        {name: \"Sunil Gavaskar\", age: 22}\n    ],\n    clickHandler: function () {\n        var self = this; // You know what this is!\n        this.data.forEach (function (person) {\n            // We need self so that we get access to the value of 'tournament'\n            // which is outside of this.data\n            console.log (person.name + \" has played the \" + self.tournament + \" at the age of \" + person.age)\n        })\n    }\n}\nuser.clickHandler();\n```\nThe above code when written as a Fat Arrow function, is going to blow your mind away!\n\n```javascript\nvar user = {\n    tournament: \"ICC World Cup\",\n    data: [\n        {name: \"Sachin Tendulkar\", age: 18},\n        {name: \"Sunil Gavaskar\", age: 22}\n    ],\n    clickHandler:function () {\n        this.data.forEach ((person) => {\n            // Here is all the magic. You can now access the value of 'tournament'\n            // directly using `this`\n            console.log (person.name + \" has played the \" + this.tournament + \" at the age of \" + person.age)\n        })\n    }\n}\nuser.clickHandler();\n```\n\nIn ES5, ```bind()``` or ```var that = this;``` are necessary as functions create their own ```this```. We need to store the parent ```this``` in a variable that can be referenced in the callback or take care of binding ourselves. However, in ES6, Arrows instead bind ```this``` to the immediate enclosing lexical scope. Much better, right! These arrow functions seem so much more natural.\n\nThis concludes this blog post of ES6 Arrow functions or the Fat Arrow functions. Make sure you start using it right away! Y0u don't have to go to your code base and start converting functions immediately, but at least start using this new syntax for all the new functions that you will write from here on.\n\nI know I am joining the band wagon really late and definitely am not one of the early adopters, but there definitely would be at lest one person I would be able to help with this post apart from the future me! &#128512;\n\nStay tuned for more posts on ES6 and things that I will keep learning. For those who have followed this blog of mine, from it's early days, you will see a lot more posts! Until next time - have fun with the fat arrow functions!\n",
    "iso8601Date": "2017-10-10T14:34:00-07:00",
    "basename": "2017-10-10-es6-fat-arrow-functions"
  },
  "2017-10-11-es6-101-lexical-declarations-const": {
    "layout": "post",
    "title": "ES6 101 - Lexical Declarations - Const",
    "date": "2017-10-11T15:33:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6 Const",
      "ES6",
      "ES6 Lexcical Declarations",
      "ES6 basics"
    ],
    "modified_time": "2017-10-11T15:33:37.975-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-8740145346232482856",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-lexical-declarations-const.html",
    "preview": "This is the third post in the ES6 101 Series and we will be looking …",
    "content": "\n\nThis is the third post in the ES6 101 Series and we will be looking at the ES6 lexical declartions keyword ```const```. This is more of a continuation of the post on ```let```, so I would highly recommend you to read [that](https://theuidev.github.io/es6-101-lexical-declarations-let/) before you move forward. In case you feel like looking at ```const``` that too works! Go ahead and keep reading.\n\nAs we saw in the post yesterday, variables created with the ```let``` keyword have **limited** scope and they live within the block, statement or the expression that they have been declared in. You **cannot** redeclare the ```let``` variables but these variables are **mutable**, i.e. theirs values can be changed and updated.\n\nAs the name suggests, ```const``` helps you create variables that have a constant value! These variables are **not** mutable, which means, the value of these variables cannot be changed or updated. Let's look at a few examples to understand this better.\n\n## Examples using ES6 ```const```\n```javascript\n    const pi = 3.14;\n    console.log(pi);\n\n    pi = ++pi; // Uncaught TypeError: Assignment to constant variable.\n```\nThe browser throws an error - ```Uncaught TypeError: Assignment to constant variable.``` which clearly states that you cannot reassign a value to a constant variable. We can however, use the value of a constant variable in other plces and modify the value of such variables. Let's modify the above code to do so!\n\n```javascript\n    const pi = 3.14;\n    console.log(pi);\n\n    let piLet = pi;\n    piLet = ++piLet;\n    console.log(\"Value os piLet: \" + piLet); // 4.140000000000001\n    console.log(\"Value os pi: \" + pi); // 3.14\n```\n\nAll of the above holds good, when the value of the constant variable is a number, string or boolean. However, if the value is an object, it should be noted that the constant variable then becomes **mutable**. Let's look at an example, to clarify this.\n\n```javascript\n    const moreVars = {\n        \"someKey\": \"someValue\",\n        \"moreKeys\": \"moreValues\"\n    } // For the lack of creativity! But you get the point!\n    console.log(moreVars); // {\"someKey\":\"someValue\",\"moreKeys\":\"moreValues\"}\n    console.log(moreVars.someKey); // someValue\n    console.log(moreVars.moreKeys); // moreValues\n\n    moreVars[\"moreKeys\"] = \"someMoreValues\";\n    console.log(moreVars.moreKeys); // someMoreValues\n    console.log(moreVars); // {someKey: \"someValue\", moreKeys: \"someMoreValues\"}\n```\n\nThere are 2 key take aways from the above examples.\n1. If a variable is decalared as a constant using the ```const``` keyword, and has a value set to a string, number or boolean, then the value of such a constant variable **cannot be mutated**.\n2. If the value of a constant variable is an **object**, only then can the value of such a constant variable **be mutated**.\n\nHope this clears up the concept of the ES6 ```const``` for you guys and empowers you to use it in your code basees. In the next post in the ES6 series, we will look at the ES6 ```spread``` operator. Until next time!\n",
    "iso8601Date": "2017-10-11T15:33:00-07:00",
    "basename": "2017-10-11-es6-101-lexical-declarations-const"
  },
  "2017-10-11-es6-101-spread-operator": {
    "layout": "post",
    "title": "ES6 101 - Spread operator",
    "date": "2017-10-11T20:16:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6",
      "ES6 basics",
      "ES6 spread operator. ES6 ..."
    ],
    "modified_time": "2017-10-16T11:10:47.837-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-14066384468544939",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-spread-operator.html",
    "preview": "Welcome to the fourth post in the ES6 101 series and the topic of …",
    "content": "\n\nWelcome to the fourth post in the ES6 101 series and the topic of discussion today is the **Spread operator** or the **dot dot dot operator** ```...```. It is not very common to call it the \"dot dot dot\" operator, but I just kind of like the ring to it! Also when you say \"dot dot dot\" it actually helps me visualize unpacking multiple gifts from a gift box. Wondering why I am taking about gifts and gift boxes and \"dot dot dot\". Well, the **spread operator** ```...``` is actually more like unwrapping gifts from a gift box. The spread syntax allows an iterable such as an array expression to be expanded in-place. Let's actually dive into some examples straight away. It is much more simpler that way!\n\n## Examples of the ES6 Spread Operator ```...```\n### Example #1\n**Problem statement:** Let's write a function to display the sum of 3 numbers passed to it in an array.\nWe would have done this as follows in the old ES5 way. &#128527;\n```javascript\n    var arr = [1,2,3];\n    function sum(a,b,c) {\n        var output = a + b + c;\n        console.log(\"Sum of 3 numbers is: \" + output);\n    }\n    sum.apply(null, arr); // Sum of 3 numbers is: 6\n```\nIt is common to use ```Function.prototype.apply``` in cases where you want to use the elements of an array as arguments to a function. Using ```apply``` is a far better way of doing things than the the traditional ```for``` loop. Let's take a look here. &#128546;\n```javascript\n    var arr = [1,2,3];\n    function sum(arr){\n        var output = 0;\n        for (var i=0; i<arr.length; i++){\n            output = output + arr[i];\n        }\n        console.log(\"Sum of 3 numbers is: \" + output);\n    }\n    sum(arr);\n```\nNow let's look at how we would do the same thing in ES6 spread\n```javascript\n    let arr = [1,2,3];\n    let sum = (a,b,c) => \"Sum of 3 numbers is: \" + (a + b + c);\n    sum(...arr); // Sum of 3 numbers is: 6\n```\nPretty mind boggling, right? &#128525; Looks like we can replace apply completely. Don't need it anymore. The spread operator can also be used multiple times. &#128526; Let's see how.\n```javascript\n    let arr = [1,2,3];\n    let sum = (a,b,c,d,e) => \"Sum of 5 numbers is: \" + (a + b + c + d + e);\n    sum(...arr, ..[4,5]); // Sum of 5 numbers is: 15\n```\n\n### Example #3\n**Problem Statement:** Let's try to merge and concatenate 2 arrays.\nLet's start with the simpler of the 2. We need to concatenate 2 arrays. Now that's simple! We can just do the following.\n```javascript\n    let concatArr = array1.concat(array2);\n    // or the other way around, based on requirement\n    let concatArr = array2.concat(array1);\n```\nNo big deal! Pretty straightforward. Now let's say we have to merge 2 arrays at a specific location. How would we go about that? Well, array's have some very powerful methods that can come to our rescue. The knights in shining armour would have to ```push```, ```splice``` and ```concat``` for us to win the battle. Looks like a pretty difficult task.\n\nNow obviously, since we are taking about the ```...```(spread) operator, most definitely it is going to come to our rescue. Let's see how.\n```javascript\n    let arr1 = [1,2,3];\n    let arr2 = [4,5];\n    let concatArr = [...arr1, ...arr2];\n    console.log(concatArr); // That is all. You have your concatenated array!\n    let mergeArr = [1, ...arr2, 2, 3];\n    console.log(merge Arr); // Now you have your merged array [1,4,5,2,3]\n```\n\nSo, as you might have gathered by now, the spread operator ```...``` allows you to unpack an array or iterate through the contents of the array and provide them directly to a function as an argument. The function can then process this information and retun a value.\n\nHope you now have an understanding of how the spread operator works. Go ahead and figure out the specific use cases in which you can make use of the spread operator in your code base and make your code ES6 compliant!\n\nIn case you want to look at other posts in the ES6 101 series, here are the links for your quick reference.\n1. [ES6 Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [ES6 Lexical Declarations Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [ES6 Lexical Declarations Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n\nHope you enjoy the series and let me know what you think of the posts so far! Until next post! &#128588;\n",
    "iso8601Date": "2017-10-11T20:16:00-07:00",
    "basename": "2017-10-11-es6-101-spread-operator"
  },
  "2017-10-12-es6-rest-operator": {
    "layout": "post",
    "title": "ES6 Rest operator",
    "date": "2017-10-12T16:30:00.002-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 ...",
      "ES6 101",
      "ES6",
      "ES6 basics",
      "ES6 rest",
      "ES6 spread operator"
    ],
    "modified_time": "2017-10-12T16:30:29.536-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-7820878582798135330",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-rest-operator.html",
    "preview": "Welcome to the 6th post in the ES6 101 series and the topic for …",
    "content": "\n\nWelcome to the 6th post in the ES6 101 series and the topic for today is the ```Rest``` operator. The ```rest``` operator now allows us to process infinite parameters in a function.&#128559; Yes. really! If you remember the spread operator ```...``` we discussed previously in this series, the rest operator looks the same ```...``` Let's dig into how we can use the rest operator. It is really simple and easy to work with.\n\n## Examples for ES6 Rest operator\n\n**Problem Statement:** Calculate the sum of all numbers sent to the add function.\nTo achieve this in ES5, we would find the number of parameters and then run a for loop that many number of times and calculate the sum. In ES6, with the rest operator it is a cake walk.\n```javascript\n    let sum = (a, ...b) => {\n        console.log(a); // This is the first parameter.\n        console.log(b); // This is an array of the remaining parameters.\n        console.log(\"Total sum is: \" + (a + b.reduce((num, total) => num + total)));\n    }\n    sum(1,2,3,4,5); // 15\n    sum(1,2,3); // 6\n    sum(7,8,9); // 24\n```\nAs you can see, it is pretty imple and straight forward to use the rest operator. &#128525; We no longer need to loop through the parameters of the function, find their length and all that hassel! So what are you waiting for? Go ahead and start modifying your code right away! Will see you in the next post tomorrow...\n",
    "iso8601Date": "2017-10-12T16:30:00-07:00",
    "basename": "2017-10-12-es6-rest-operator"
  },
  "2017-10-12-es6-template-literals": {
    "layout": "post",
    "title": "ES6 Template Literals",
    "date": "2017-10-12T12:51:00.002-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6",
      "ES6 template literals",
      "ES6 basics",
      "ES6 string interpolation"
    ],
    "modified_time": "2017-10-12T12:51:20.404-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-412893805628838142",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-template-literals.html",
    "preview": "This is the fifth post in the ES6 101 series and we will be looking …",
    "content": "\n\nThis is the fifth post in the ES6 101 series and we will be looking at **template literals** today. Template literals are also sometimes know as **string interpolation**. Before we proceed to dive into our topic today, if you want to look into any of the other topics we have covered so far, then here is a quick reference.\n1. [ES6 Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [ES6 Lexical Declarations Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [ES6 Lexical Declarations Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n4. [ES6 Spread Operator](https://theuidev.github.io/es6-101-spread-operator/)\n\nIf you are currently working with some HTML templating libraries like Handlebars or Mustache, you are aware of how you can bind data values in your HTML using syntax like ```{{data.value}}```. String literals work very similar in that way. Let's look at a simple example and then get into the details from there on.\n\n## Examples of String Literals\n#### Basic expression placeholder\n```javascript\n    let name = \"Shreerang\";\n    console.log(`Hello World! I am ${name}.`);\n```\nThere are 2 syntactic things to note in the above example.\n1. ``` `` ``` are to be used insted of the traditional ```''``` or ```\"\"``` for string literals.\n2. The template literal is defined by the ```${}``` syntax.\n\nThis is pretty sleek. &#128526; It is even better when you can do the same with object literals. Let's modify the same code above to see how this works!\n\n### Expressions with object literals\n```javascript\n    let user = {\n        \"name\" : \"Shreerang\"\n    }\n    console.log(`Hello World! I am ${user.name}.`);\n```\nIf you are using React already then you would definitely see a lot of benefit here. If you are using Handlebars and are wondering if you can get replacing and shake up the space, then hold on! You cannot; atleast immediately. I would recommend you read this [article](https://www.keithcirkel.co.uk/es6-template-literals/) for more details.\n\n### Expression Interpolation\nThis probably is the most powerful feature of Template Literals. You can put any inline code within the ```&{}``` syntax and the code inside will be executed, and added to the string in place. This is pretty cool and opens up so many new avenues.\n```javascript\n    console.log(`1+1=${1+1}`); // 1+1=2\n```\nYou can also have functions within the expressions. Let's look at an example.\n```javascript\n    let sum = (a,b) => a+b;\n    console.log(`1+1=${sum(1,1)}`) // 1+1=2\n```\n\n### Tagged Template Literal\nLet us now take a look at a concept called the **tagged template literal**. If you call a function with a template literal, then you will get the composite parts of the template literal. You basically will get access to all the string fragments, and all of the results from each interpolated expression, rather than a processed string.\n\nSounds confusing? Let's look at an example to try and undersatnd this better.\n```javascript\n    let name = 'Shreerang';\n    let hello = (string, value) => {\n        console.log(string); // Welcome Shreerang\n        console.log(value); // undefined\n    }\n    hello(`Welcome ${name}`);\n```\n\n```javascript\n    let name = 'Shreerang';\n    let hello = (string, value) => {\n        console.log(string); // ['Welcome', '']\n        console.log(value); // Shreerang\n    }\n    hello `Welcome ${name}`; // This is tagged template literal syntax.\n```\n\nAs you can see above we are invoking the method ```hello``` in 2 different ways. Observe the difference in syntax. One has the paranthesis ```hello(`Welcome ${name}`)``` in the function call whereas the other does not. ```hello `Welcome ${name}` ```. The second syntax is called the **tagged template literal** whereas in the first the template literal `Welcome ${name}` is evaluated and then sent as a string to the ```hello``` method.\n\nHope this clears up the confusion around tagged template literal. This was the last part of this tutorial and we can conclude this post with the following takeaways.\n1. Template literal can be used as a basic expression holder.\n2. Template literals work with an object literal too.\n3. Any inline code within the template literal will be excuted and added to the string inline.\n4. Tagged template literal gets you access to all the strings as an array and also the values passed to a function.\n5. Template literals are **not** yet ready to replace Handlebars or such similar library.\n\nHope you found this article helpful. We will continue with the series and look at a new topic in the next post. Until then, start using ES6. The time is now! &#128521;\n",
    "iso8601Date": "2017-10-12T12:51:00-07:00",
    "basename": "2017-10-12-es6-template-literals"
  },
  "2017-10-16-diwali-wishes": {
    "layout": "post",
    "title": "Diwali Wishes",
    "date": "2017-10-16T08:21:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "happy diwali",
      "happy diwali 2017",
      "Bay Area photographer",
      "happy new year",
      "holiday photographer",
      "portrait photographer",
      "SF Bay Area photographer"
    ],
    "modified_time": "2017-10-16T08:21:47.390-07:00",
    "photo_url": "/blog/happy_diwali.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3954907314356260330",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/diwali-wishes.html",
    "preview": "We are already on the brink of the new year and the festival of …",
    "content": "\n\nWe are already on the brink of the new year and the festival of lights is already here!\n\nMay this festival of lights, bring joy, peace and prosperity to you and your loved ones! Wishing you a very happy Diwali and a prosperous new year!\n\nFor your holiday family portraits and baby shoots I would recommend a really talented and professional photographer in the SF Bay Area. Her [portfolio](http://akshataphotography.com/) would speak for itself!\n\nHappy holidays and have a safe Diwali!\n",
    "iso8601Date": "2017-10-16T08:21:00-07:00",
    "basename": "2017-10-16-diwali-wishes"
  },
  "2017-10-17-es6-101-default-parameters": {
    "layout": "post",
    "title": "ES6 101 - Default parameters",
    "date": "2017-10-17T11:50:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6",
      "ES6 basics",
      "ES6 default parameters",
      "default function parameters"
    ],
    "modified_time": "2017-10-17T11:50:22.013-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-6679642616495912931",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-default-parameters.html",
    "preview": "As we make progress in this ES6 series, let's look at **Default …",
    "content": "\n\nAs we make progress in this ES6 series, let's look at **Default Parameters** today. This is the 7th post in the ES6 series. As the name suggests, ES6 now allows you to initialize function parameters with some default values in case no value or ```undefined``` is passed to the function.\n\nWhen using the ES5 syntax, it is a common practice to check the values of the parameteres in the function body. We would generally do stuff like this.\n\n```javascript\nfunction sum(a,b) {\n    var total;\n    if (typeof(b) === 'undefined') {\n        b = 10; // Default value of b if it is unavailable\n    }\n    total = a + b;\n    return total;\n}\nconsole.log('Sum Total is: ' + sum(1)); // 11\n```\n\nOther ways of setting the default value of ```b``` would include the following.\n```javascript\n    b = b || 10; // Default value of b is set\n```\nor\n```javascript\n    if(arguments.length === 1) {\n        b = 10; // Default value of b is set\n    }\n```\n\nWith ES6, you can now set a defaut value for parameters in the function head itself. Let's modify the above example and rewrite that with ES6.\n```javascript\n    let sum = (a, b=10) => a + b;\n    console.log('Sum Total is: ' + sum(1)) // 11\n    console.log('Sum Total is: ' + sum(1,2)) // 3\n```\nThat's it! As simple as that! See how easy life has become! &#128512; &#128525; As can be seen in the example above, if you do send both the parameters in the function call, the default value will just be ignored. &#128526;\n\nOne thing to note here is that the default value of a parameter is evaluated at run time. Let's take a look at an example to quickly undersatnd this concept.\n```javascript\n    let append = (a, b=[]) => {\n        b.push(a);\n        console.log('New array is:' + b);\n}\nappend(1); // New array is: 1\nappend(2); // New array is: 2\n```\n\nThis goes to show that the ```array b``` is initialized to an empty array every single time the function is invoked. Just make sure you keep this mind when implementing **Default parameters** in your code.\n\nThis significantly reduces the code, and must be resulting in pretty good performance improvements. I haven't run any tests so far, but I am thinking that I should do a post of performance improvements when using the ES6 features. &#128520; That's for another time though. Until then, enjoy this post and let me know in case you catch any errors with the post. In case you are interested in learning other ES6 features, here's a list of the articles covered in the ES6 series so far. &#128588;\n1. [Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [Lexical Declarations - Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [Lexical Declarations - Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n4. [Spread Operator](https://theuidev.github.io/es6-101-spread-operator/)\n5. [Template Literal](https://theuidev.github.io/es6-template-literals/)\n6. [Rest Operator](https://theuidev.github.io/es6-rest-operator/)\n",
    "iso8601Date": "2017-10-17T11:50:00-07:00",
    "basename": "2017-10-17-es6-101-default-parameters"
  },
  "2017-10-17-es6-101-destructuring": {
    "layout": "post",
    "title": "ES6 101 - Destructuring",
    "date": "2017-10-17T15:34:00.000-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6",
      "ES6 basics",
      "ES6 default parameters",
      "ES6 rest",
      "ES6 destructuring"
    ],
    "modified_time": "2017-10-17T15:34:18.407-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-4120373506975816327",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-destructuring.html",
    "preview": "ES6 **Destructuring assignments** is the topic of this post and we …",
    "content": "\n\nES6 **Destructuring assignments** is the topic of this post and we will take a look at what destructuring means and we will look at multiole examples to understand the concept. As the name suggests, using the destructuring syntax, we would be breaking down values in an array or properties in an object into seperate variables.\n\nArrays and objects allow you create, on-the-fly various packages of data.\n```javascript\n    let a = [1,2,3];\n```\nES6 destructuring uses similar syntax, however the LHS will now be a variable that would hold the package that you need to create. Sounds complex? &#128531; Not really, just move ahead to the example that follows and you should get the hang of it.\n```javascript\n    let a = [1,2,3];\n    let [x,y] = a; // We are now assigning array 'a' to a new array\n    console.log(x); // 1\n    console.log(y); // 2\n\n    let [m,n,o] = a;\n    console.log(m); // 1\n    console.log(n); // 2\n    console.log(o); // 3\n```\nThis helps us clearly see what destructuring does for an array! It basically unpacks the values in the array and assigns it to different variables. This destructuring works with object literals too. Let's look at an example.\n```javascript\nlet a = {\n    \"p\": 10,\n    \"q\": 20\n}\nlet {p,q} = a;\nconsole.log(p); // 10\nconsole.log(q); // 20\n```\nNote however that, the variable names have to be same as the key names. In the example above, if you replace ```let {p,q} = a``` with ```let {m,n} = a``` and then console the values of ```m``` and ```n```. The values will be ```undefined```.\n\nIf you need to assign the value to new variable names, then we would have to create a new object in that manner. Let's see how.\n```javascript\nlet a = {\n    \"p\": 10,\n    \"q\": 20\n}\nlet {p: m, q: n} = a;\nconsole.log(m); // 10\nconsole.log(n); // 20\n```\nNow, remember the ES6 **default parameters**. In case you need to revisit them, jump over to [this](https://shreerangpatwardhan.blogspot.com/2017/10/es6-101-default-parameters.html) article and then come back. You can assign default values to variables and then replace them with values from an array you are destructuring. Let's look at an example. &#128512;\n```javascript\n    let [a=10,b=20] = [1];\n    console.log(a); // 1 Value comes from destructured array that has value 1\n    console.log(b); // 20 Default value assigned to b\n```\nWith destructuring the possibilities are endless. Let's look at an example where we want to swap the values of 2 varaibles. In the old ES5 way, it would be done either by using a third temporary variables, or can be done using the same 2 variables as well. Let's see how that would be done.\n```javascript\n    let a = 5;\n    let b = 10;\n    let temp;\n    temp = a;\n    a = b;\n    b = temp;\n    console.log(a); // 10\n    console.log(b); // 5\n```\nor\n```javascript\n    let a = 5;\n    let b = 10;\n    a = a + b;\n    b = a - b;\n    a = a - b;\n    console.log(a); // 10\n    console.log(b); // 5\n```\nLet's see what happens to this code when implemented in ES6 with the destructuring syntax.\n```javascript\n    let a = 5;\n    let b = 10;\n    [a,b] = [b,a];\n    console.log(a);\n    console.log(b);\n```\nMakes life so much better! I am probably saying this again and again, but it really is so simple. I am cursing myself for not using ES6 before this! Really...How could I do this? &#128534; &#128534; Anyways, now we are learning and that's better than not doing it at all.\n\nWhat you can also do is, ignore the values that you don't need. Again, let's see an example.\n```javascript\n    let [a,,b] = [1,2,3];\n    console.log(a); // 1\n    console.log(b); // 3\n```\nThe way in which you can exclude some values from an array, you can also be selective about the values you need and then assign the rest of the values to another variable. To revisit the ES6 ```rest``` operator you can jump to [this](https://shreerangpatwardhan.blogspot.com/2017/10/es6-rest-operator.html) post and come back here.\n```javascript\n    let [a, ...b] = [1,2,3];\n    console.log(a); // 1\n    console.log(b); // [2,3]\n```\n\nAnd this concludes our post on ES6 destructuring. To reacp - destructuring actually does what it says. It helps you destructure the values of an array or an object into individual, separate variables which can be used independently. Again, I cannot stress enough on my assumption that these ES6 features should bring in more performance improvements on the code level, and more would come on that in a later post. I have already made a note for myself to do a post on ES6 performance.\n\nUntil next time, you can browse through the list of ES6 features that we have covered so far. As usual, let me know of any issues you come across in the post. Have fun! ES6 rocks! &#128526;\n1. [Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [Lexical Declarations - Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [Lexical Declarations - Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n4. [Spread Operator](https://theuidev.github.io/es6-101-spread-operator/)\n5. [Template Literal](https://theuidev.github.io/es6-template-literals/)\n6. [Rest Operator](https://theuidev.github.io/es6-rest-operator/)\n7. [Default parameters](https://theuidev.github.io/es6-101-default-parameters/)\n",
    "iso8601Date": "2017-10-17T15:34:00-07:00",
    "basename": "2017-10-17-es6-101-destructuring"
  },
  "2017-10-17-es6-101-forof": {
    "layout": "post",
    "title": "ES6 101 - For..of",
    "date": "2017-10-17T18:47:00.002-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6 iterators",
      "ES6",
      "ES6 basics",
      "for of vs for in",
      "javascript for in",
      "for in vs for of",
      "ES6 for of"
    ],
    "modified_time": "2017-10-17T18:47:57.408-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-6213911486987721230",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-forof.html",
    "preview": "This is the 9th post in the ES6 series and we have looked at a whole …",
    "content": "\n\nThis is the 9th post in the ES6 series and we have looked at a whole bunch of some amazing and highly productive ES6 features that you can start using right away! Here is a comprehensive list of all the features that we have covered so far. &#128525;\n1. [Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [Lexical Declarations - Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [Lexical Declarations - Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n4. [Spread Operator](https://theuidev.github.io/es6-101-spread-operator/)\n5. [Template Literal](https://theuidev.github.io/es6-template-literals/)\n6. [Rest Operator](https://theuidev.github.io/es6-rest-operator/)\n7. [Default parameters](https://theuidev.github.io/es6-101-default-parameters/)\n8. [Destructuring](https://theuidev.github.io/es6-101-destructuring/)\n\nNow let's look at what ```for..if``` has to offer us. Essentially, ```for..of``` does exactly the opposite of what ```for..in``` does. Let's see what the difference is.\n```javascript\n    // Using for..in\n    let someVar = [1,2,3,4,5]\n    for(let item in someVar) {\n        console.log(item); // The index values would be consoled.\n    }\n```\nWhen you execute the above code snippet, you will observe that, you get all the index values ```0 1 2 3 4``` of the array in the console. If you had to get access to the values at these indexes in the array, you would have to add the following to the above snippet in the ```for..in``` loop.\n```javascript\n    console.log(`${item}'s value is: ${someVar[item]}`)\n```\nWhen you execute this, you will get access to the value at each index. ```someVar[item]``` basically get's you the values from the array.\n\nWith ES6, you don't need to do this, as ```for..of``` does this for you. It actually is that simple and straight-forward. Let's run a small code snippet to confirm.\n```javascript\n    // Using for..of\n    let someVar = [1,2,3,4,5]\n    for(let item of someVar) {\n        console.log(item); // All the values would be consoled.\n    }\n```\nUsing the ```for..of``` you can iterate over all iterable objects which include ```Array```, ```Map```, ```Set```, ```String```, ```TypedArray``` and so on. However, ```Object``` is not iterable.\n\nThat's it for this post. This was simple and pretty easy. You can get started right away on your code and get migrating to ES6.\n",
    "iso8601Date": "2017-10-17T18:47:00-07:00",
    "basename": "2017-10-17-es6-101-forof"
  },
  "2017-10-18-es6-101-map": {
    "layout": "post",
    "title": "ES6 101 - Map",
    "date": "2017-10-18T16:31:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6 Map",
      "ES6",
      "ES6 set",
      "ES6 basics",
      "ES6 for of"
    ],
    "modified_time": "2017-10-18T16:31:43.566-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-6036275051098895120",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-map.html",
    "preview": "ES6 ```Map``` is the topic of today's post which also is the 11th in …",
    "content": "\n\nES6 ```Map``` is the topic of today's post which also is the 11th in the ES6 101 Series. Map is going to be fairly easy, so before jumping into it, if you want to look at other features we have covered so far, here is a quick list for your reference.\n1. [Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [Lexical Declarations - Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [Lexical Declarations - Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n4. [Spread Operator](https://theuidev.github.io/es6-101-spread-operator/)\n5. [Template Literal](https://theuidev.github.io/es6-template-literals/)\n6. [Rest Operator](https://theuidev.github.io/es6-rest-operator/)\n7. [Default parameters](https://theuidev.github.io/es6-101-default-parameters/)\n8. [Destructuring](https://theuidev.github.io/es6-101-destructuring/)\n9. [For..of](https://theuidev.github.io/es6-101-forof/)\n10. [Set](https://theuidev.github.io/es6-101-set/)\n\nNow let's see what ```Map``` has to offer. As opposed to [Set](https://theuidev.github.io/es6-101-set/) (which by the way, I highly recommend reading), Map saves values as key-value pair. Let's see for ourselves how this works!\n\n## Example of ES6 ```Map```\n```javascript\nvar dummyMap = new Map();\n\ndummyMap.set(\"1\"); // Method is set as against add in ES6 Set\nconsole.log(dummyMap); // [[\"1\",null]]\n\ndummyMap.set(\"1\", \"one\");\nconsole.log(dummyMap); // [[\"1\",\"one\"]]\n\ndummyMap.set(\"2\", \"two\").set(\"3\",\"three\");\nconsole.log(dummyMap); // [[\"1\",\"one\"],[\"2\",\"two\"],[\"3\",\"three\"]]\n\nconsole.log(dummyMap.size); //3\n\nconsole.log(dummyMap.get(\"2\")); // two\n\nconsole.log(dummyMap.has(\"3\")); // true\nconsole.log(dummyMap.has(\"two\")); // false\n\nfor(let item of dummyMap){\n    console.log(item); // Lists out all the key-value pairs in the Map\n    console.log(`Numeric ${item[1]} is: ${item[0]}`); // Numeric one is: 1 and so on for each key-value pair in the Map\n}\n\ndummyMap.delete(\"3\");\nconsole.log(dummyMap); // [[\"1\",\"one\"],[\"2\",\"two\"]]\n\ndummyMap.clear();\nconsole.log(dummyMap); // []\n\n```\nPretty simple as always! Very easy to implement and this makes me fall in love with these ES6 features more and more.&#128525; Anyways, let's see what all things can we gather from this code snippet above.\n1. To add a key-value pair to a ```Map``` you use the method ```set``` as against ```add``` used with ```Set```. That is because we can add single values in a Set, but a Map creates an array of key-value pairs.\n2. If you do set only one value as we did with ```dummyMap.set(\"1\")```, the value of this key would be set to ```null``` and if you try and get access to this value, you will get ```undefined```.\n3. If you try and insert a new key-value pair which has a key that already exists in the Map, then the original key-value pair will be over-written.\n4. The size property returns the length of the map.\n5. The ```get``` method accepts the key as a parameter and returns the value of that key.\n6. The ```has``` method checks if a key-value pair exists in the Map based on the key. It does not accept the value as a parameter.\n7. You can run a ```for..of``` loop on the Map and then get access to each key-value pair as an array and then even access the independant values of the key and it's value from this array.\n8. the ```delete``` method deletes that particular key-value pair from the Map\n9. The ```clear``` method wipes off the entire Map.\n\nThat's pretty much it! This is ES6 Map for you guys. Pretty awesome. Provides the developers with much better control over an object than before. Make sure you start using this right away and let me know how you are using it in the real world code. All constructive feedback is always welcome and don't forget to like my [Facebook page](https://www.facebook.com/SpatialUnlimited/) to stay updated on what's happening. You can even subscribe to this blog by clicking the **Subscribe** link at the top of the page.\n",
    "iso8601Date": "2017-10-18T16:31:00-07:00",
    "basename": "2017-10-18-es6-101-map"
  },
  "2017-10-18-es6-101-set": {
    "layout": "post",
    "title": "ES6 101 - Set",
    "date": "2017-10-18T13:43:00.000-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6",
      "ES6 set",
      "ES6 basics",
      "ES6 for of"
    ],
    "modified_time": "2017-10-18T13:43:11.135-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-560837028578060072",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-set.html",
    "preview": "This is going to be the 10th post in the ES6 101 series and the …",
    "content": "\n\nThis is going to be the 10th post in the ES6 101 series and the topic for today is ```Set```. ```Set``` object is a collection of values and is iterable. One cool thing about the values in set is that these are **unique**. This means that a set can have a value only once. Moreover you can think of a set as an actualy set in Mathematics. We will see a few samples to understand this concept of ```set```.\n\n## Examples of ES6 ```Set```\n### Creating a new set and adding values to it.\nLet's create  a new set and add some values to it and then discuss it further.\n```javascript\n    let dummySet = new Set(); // That's it! A new set object is created\n\n    dummySet.add(1);\n    console.log(dummySet); // [1]\n\n    dummySet.add(1);\n    console.log(dummySet); // [1] and not [1,1]. This is because, values in a set are unique.\n\n    dummySet.add(2).add(3).add(4);\n    console.log(dummySet); // [1,2,3,4]\n\n    dummySet.add('The UnderTaker').add('John Cena');\n    console.log(dummySet); // [1,2,3,4,'The UnderTaker',''John Cena]\n    // Yes. I am a WWE fan...\n\n    dummySet.add({\"someKey\": \"someValue\"})\n    console.log(dummySet); // [1,2,3,4,'The UnderTaker','John Cena', {\"someKey\": \"someValue\"}]\n\n    console.log(dummySet.size) // 7\n\n    console.log(dummySet.has('John Cena')); // true\n\n    console.log(dummySet.has(7)); // false\n\n    for (let item of dummySet) {\n        console.log(item); // All the values in the set are consoled.\n    }\n```\nPretty straight forward! I know ES6 is cool. Nothing complex &#128526;. There are a few things to note in the sample above.\n1. ```Set``` has unique values. Even if you add the same value twice or more, you will get it only once.\n2. ```Set``` can contain different types of values.\n3. ```Set``` is iterable as demonstarted by the for..of loop. In case you don't know how the for..of works, you can head over to the [post](http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-forof.html) which discusses that.\n\nThat's it! This is what ```Set``` does in ES6. We could conclude the post here, but in the begining of the post I mentioned that this ```Set``` is equivalent to its mathematical counterpart, so let's take a look at what that is.\n\nSets in mathematics have a few very popular operations like Union, Intersection and Complement. To help you jolt your memory and save you a Google search, here are the Venn diagrams that depict these 3 operations.\n\n### Implementing the mathematical set operations using ES6 ```Set```\nLet's see how we can implement these mathematical operations using ES6 ```Set```. &#128525;\n```javascript\n    let setA = new Set([1,2,3]);\n    let setB = new Set([2,3,4,5]);\n    let setC = new Set([1,2]);\n\n    // Find if a set is a super set of another\n    Set.prototype.isSuperset = function (subset) {\n        for (let item of subset) {\n            if (!this.has(item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    console.log(setA.isSuperset(setC)) // true\n    console.log(setA.isSuperset(setB)) // false Obviously! As all values of setB are not contained in setA\n\n    // Find the union of 2 sets.\n    Set.prototype.union = function(setTwo){\n        let setD = new Set(this);\n        for(let item of setTwo){\n            if(!this.has(item)){\n                setD.add(item)\n            }\n        }\n        return setD;\n    }\n    console.log(setA.union(setB)); // [1,2,3,4,5]\n    console.log(setA.union(setC)); // [1,2,3]\n\n    // Find the intersection between 2 sets.\n    Set.prototype.intersect = function(setTwo){\n        let setD = new Set();\n        for(let item of setTwo){\n            if(this.has(item)){\n                setD.add(item);\n            }\n        }\n        return setD;\n    }\n    console.log(setA.intersect(setB)); // [2,3]\n    console.log(setA.intersect(setC)); // [1,2]\n\n    // Find the complement of a set\n    Set.prototype.complement = function(setTwo){\n        let setD = new Set();\n        for(let item of setTwo){\n            if(!this.has(item)){\n                setD.add(item);\n            }\n        }\n        return setD;\n    }\n    console.log(setA.complement(setB)); // [4,5]\n    console.log(setA.complement(setC)); // []\n```\nThis above example demonstartes what we can achieve with ES6 ```Set```. Hope this helps you understand the capabilities of this powerful feature. Let me know what you think of it and how you are using it in your real world code! Until next post in the series, you can browse through the other features that we have discussed so far.\n1. [Fat Arrow Functions](https://theuidev.github.io/es6-fat-arrow-functions/)\n2. [Lexical Declarations - Let](https://theuidev.github.io/es6-101-lexical-declarations-let/)\n3. [Lexical Declarations - Const](https://theuidev.github.io/es6-101-lexical-declarations-const/)\n4. [Spread Operator](https://theuidev.github.io/es6-101-spread-operator/)\n5. [Template Literal](https://theuidev.github.io/es6-template-literals/)\n6. [Rest Operator](https://theuidev.github.io/es6-rest-operator/)\n7. [Default parameters](https://theuidev.github.io/es6-101-default-parameters/)\n8. [Destructuring](https://theuidev.github.io/es6-101-destructuring/)\n9. [For..of](https://theuidev.github.io/es6-101-forof/)\n",
    "iso8601Date": "2017-10-18T13:43:00-07:00",
    "basename": "2017-10-18-es6-101-set"
  },
  "2017-10-26-es6-101-class": {
    "layout": "post",
    "title": "ES6 101 - Class",
    "date": "2017-10-26T22:26:00.001-07:00",
    "author": "Shreerang Patwardhan",
    "tags": [
      "ES6 101",
      "ES6",
      "ES6 Class",
      "ES6 basics",
      "ES6 prototype"
    ],
    "modified_time": "2017-10-30T17:10:08.218-07:00",
    "photo_url": "/blog/ES6.jpg",
    "blogger_id": "tag:blogger.com,1999:blog-6009621700449257538.post-3834802896245167061",
    "blogger_orig_url": "http://shreerangpatwardhan.blogspot.com/2017/10/es6-101-class.html",
    "preview": "After a short break, I am back with a new ES6 feature today and it …",
    "content": "\n\nAfter a short break, I am back with a new ES6 feature today and it is ```class```. Classes in ES6 are what prototype-based inheritance was in ES5. See how I am using past tense for ES5 &#128523; So more or else, ```class``` provides some level of syntactical sugar-coating over the existing ES5 prototype-based syntax.\n\nLet's just dive into the syntax and we can cover the concepts as we break up the code. The full code snippet is at the very end of this post, in case you wan to just jump there and read the comments and understand the code & the concepts. (It's pretty self-explanatory!) &#128526; We will be covering some key concepts here which include the following.\n1. Class definition\n2. Constructor\n3. Extending a class\n4. Sub-classing methods\n5. Static methods\n\n## Class definition\nWe can either use the **declaration-form** or the **expression-form** to define/decalre a new ```class``` in ES6. Our example uses the **declaration-form** to define a class, but I will also show how to use the **expression-form**. Expression-form names the class. Let's see what I mean!\n#### Declaration-form\n```javascript\nclass Polygon {\n    constructor(){\n    }\n    methods(){\n    }\n}\n```\n#### Expression-form\n#### Named expression\n\n```javascript\nlet Polygon = class Polygon {\n    constructor(){\n    }\n    methods(){\n    }\n}\n```\nor even\n#### Name-less expression\n```javascript\nlet Polygon = class {\n    constructor(){\n    }\n    methods(){\n    }\n}\n```\n## Constructor method\nEvery new class has a constructor method by default. You can override it based on your requirements. In our example we are overriding the constructor method because there are a few parameters we expect to create a Polygon.\n\n## Extending a class\nWe don't need ```prototype``` anymore. There is a new keyword ```extends``` that does the job for you. In our example we have a base Polygon class and then we create a new class called Square or Circle which ```extends``` this base Polygon class. Let's take a look.\n```javascript\nclass Polygon {\n    test(){\n        console.log('Just a basic Base Class');\n    }\n}\nclass Square extends Polygon {\n    // Now class Square has access to all non-static methods of base class Polygon\n}\nlet smallSquare = new Square;\nconsole.log(smallSquare.test()); // Just a basic Base Class\n```\nIt's that simple. No more hassle of prototype and feels more natural and a lot like other programming languages. &#128526;\n\n## Sub-classing methods of the parent class\nSub-classing a method of the parent class basically means that you override a method of the parent class in a class that extends it. In our example we have a method called \"perimeter\" in our base class \"Polygon\". In class \"Circle\" which extends this base class, we override the method \"perimeter\". Let's take a look.\n```javascript\nclass Polygon {\n    constructor(length=10, breadth=10){\n        this.len = length;\n        this.breadth = breadth;\n        this.name = \"Polygon\"\n    }\n    perimeter(){\n        return (2*(this.len) + 2*(this.breadth));\n    }\n}\nclass Circle extends Polygon {\n    // Sub class the perimeter method in class Polygon\n    perimeter(radius){\n        const PI = 3.14\n        return 2*PI*radius\n    }\n}\n```\nSo now if you create an instance of the class \"Circle\" as say ```circle``` then you can actually call the permiter method as ```circle.perimeter(10)``` and then get the desired output.\n\n## Static methods\nA static method is defined by appending a metohd with the keyword ```static```. Simply put a **static method can be accessed by the class only and not by the instance of the class**. Basically, this is what will happen...\n```javascript\nclass Polygon {\n    static sides(){\n        console.log('A polygon is a figure with more than 3 equal or unequal sides! A circle is not a Polygon.')\n    }\n}\nconsole.log(Polygon.sides()) // No problem here. Statement will be output to the console.\nlet myPoly = new Polygon() // myPoly is an instance of Polygon\nconsole.log(myPoly.sides()) // Uncaught TypeError: myPoly.sides is not a function\n```\nA static method of a parent class can however be accessed by a class that extends it, using the super keyword. Something like ```myPoly.super.sides()```.\n\nThis has been a long post, but ```class``` in ES6 is one of the most important features and is a pretty important one at that. Hope you have understood the syntax and how to use it. You can start modifying your existing prototype based functions to start consuming the new class syntax.\n\nWith this we conclude the 12th article in the ES6 101 series. The example that follows is the full example with comments that shows all the concepts above. You can copy the code from the snippet below and paste it in your browser console to see the output and tweak it further.\n\n## ES6 class example\n\n```javascript\n// Declarative-form class construction\n// This is our base class\nclass Polygon {\n    // constructor method\n    constructor(length=10, breadth=10){\n        this.len = length;\n        this.breadth = breadth;\n        this.name = \"Polygon\"\n    }\n    area(){\n        return this.len * this.breadth;\n    }\n    perimeter(){\n        return (2*(this.len) + 2*(this.breadth));\n    }\n    // Static method that can be access only by this class, not by it's instance\n    static sides(){\n        console.log('A polygon is a figure with more than 3 equal or unequal sides! A circle is not a Polygon.')\n    }\n}\n\n// New class extending the base class\nclass Square extends Polygon {\n    constructor(length){\n        super(length, length)\n        this.name = \"Square\"\n    }\n}\n\n// New class extending the base class\nclass Circle extends Polygon {\n    // Sub class the perimeter method in class Polygon\n    perimeter(radius){\n        const PI = 3.14\n        return 2*PI*radius\n    }\n    // Static method of this class can access the static method of the class it extends.\n    static sides(){\n        return super.sides()\n    }\n}\n\n// Create new instances of the above classes\nconst defaultSquare = new Square();\nconst square20 = new Square(20);\nconst rect = new Polygon(10, 20);\nconst circle = new Circle();\n\n// Try and access various methods and properties of the classes above\nconsole.log(defaultSquare.area())\nconsole.log(square20.area())\nconsole.log(rect.area())\nconsole.log(circle.perimeter(10));\nconsole.log(Circle.sides())\nconsole.log(rect.sides()) // Uncaught TypeError: rect.sides is not a function\nconsole.log(square20.super.sides()) // Uncaught TypeError: square20.super.sides is not a function\n```\n",
    "iso8601Date": "2017-10-26T22:26:00-07:00",
    "basename": "2017-10-26-es6-101-class"
  },
  "2018-01-03-move-on-from-jqm": {
    "layout": "post",
    "title": "Moving on 😢 - Life after jQuery Mobile",
    "date": "2018-01-03",
    "author": "Shreerang Patwardhan",
    "tags": [
      "jQuery Mobile",
      "jQuery Mobile is dead",
      "Ratchet",
      "Framework 7",
      "Ionic",
      "OnsenUI",
      "jQuery Mobile substitutes",
      "Is jQuery Mobile dead"
    ],
    "modified_time": "2018-01-03",
    "photo_url": "/blog/The_UI_Dev_Default.png",
    "preview": "jQuery Mobile continues to be popular even today, though the …",
    "content": "\n\njQuery Mobile continues to be popular even today, though the development of the library itself seems to have come to a stand-still. According to the stats from [BuiltWith](https://trends.builtwith.com/javascript/jQuery-Mobile), about 130K sites are still using jQuery Mobile which also includes about 1.4% of the total top 10K sites.\n![BuiltWith Data Graph](/blog/BuiltWith_jqm_data.png)\nAlso if you look at the number of questions tagged with \"jquery-mobile\" on StackOverflow, the following graph clearly shows that the number is constantly increasing. This proves beyond doubt that jQuery Mobile framework is still popularly being used.\n![StackOverflow Data Graph](/blog/StackOverFlow_jqm_data.png)\nThere has been only one alpha release in the past 2 years, but 1.4.5 still continues to be the stable release. 🤷🏻‍♂️ In 1.5.0-alpha too, jQuery Mobile has brought in components from jQuery UI, making the library even more sluggish. 🚶 In the mean time however, other frameworks have gone way ahead with their components and performance in general, leaving jQuery Mobile far behind in the race. 🏃💨 jQuery Mobile has been the daddy of all these Mobile frameworks, but looks like the stronger, leaner and faster kids are beating the oldie at it's own game. 😞\n\nSo, the million dollar question - \"Is jQuery Mobile dead?\" Well, technically no. The development is still happening, but at a very slow pace. Even if a stable 1.5.0 is released in 2018, it still would not be as fast, performant and feature-rich as the new frameworks, considering it's integration with the jQuery UI widgets. This is like 2 dead technologies have been married off to each other. It's a super scary episode of \"The Walking Dead\" .\n\nI think it's time to sunset jQuery Mobile 🥀🌇 and migrate your websites to the newer, better frameworks 🌅 which we will discuss today. Though my heart breaks to say this, but the fact cannot be denied. 💔\n\nWith a heavy heart, but in order to look out for our future, let's look at 3 awesome new (not so much) mobile frameworks that can replace jQuery Mobile.\n1. [Framework 7](http://framework7.io/) (Top Pick)\n2. [OnsenUI](https://onsen.io/)\n3. [Ionic](https://ionicframework.com/)\n\nBefore we jump into the details of each of these, all of these mobile framework support and are pre-dominantly used for developing hybrid mobile applications. However, these can absolutely be used to build, static HTML websites as well as with popular frameworks like React, Vue, Angular and the likes. So now let's see how each of these stack up against jQuery Mobile.\n\n## Framework 7 👍🏻\nThe official website for Framework 7 says the following.\n\n> Framework7 - is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS & Android native look and feel.\n\n1. The most important thing to notice here is that Framework 7 provides native iOS and Android look and feel \"out-of-the-box\" 😀\n2. This framework is completely **library agnostic**. Meaning, the developer need not have expertise with Vue, React, Angular or anything else, except the fact that he needs to know HTML, CSS and Javascript.\n3. Having stated the above #, it does support Vue, React and Angular integrations.\n4. All the native animations are supported.\n5. It is extremely fast.\n6. Several ready-to-use UI components.\n7. Short learning curve and so you can quickly start migrating from jQuery Mobile to Framework 7.\nYou can see all the features live in action with [iOS look & feel](http://framework7.io/kitchen-sink/?theme=ios) and also with [Material Design look & feel](http://framework7.io/kitchen-sink/?theme=md)\n\n## OnsenUI\nOnsenUI will be my 2nd pick after Framework 7. OnsenUI v1 requires you to have understanding of AngularJs. However, OnsenUI v2 is the real prize. OnsenUI v2 is **library agnostic** like Framework 7 and again is feature-rich and comes with several ready to use UI components.\nYou can see all the features live in action with [iOS look & feel](https://onsenui.github.io/vue-onsenui-kitchensink/main.html?platform=ios&iphonex) and also with [Material Design look & feel](https://onsenui.github.io/vue-onsenui-kitchensink/main.html?platform=android)\n\n## Ionic Framework\nIonic framework is extremely popular and gained this popularity in the last 3 years! This however is **not** library agnostic and is tightly coupled with Anuglar Js 1 and/or 2. So if you are planning on using Angular or are already using it with your existing jQuery Mobile application, then Ionic should be your pick. It truly is fast and smooth and has several [UI components](https://ionicframework.com/docs/components) provided out of the box.\n\nArmed with these 3 powerful choices, and jQuery Mobile not seeming to be getting any better in the future, it's high time you sunset your jQuery Mobile sites and migrate to a better and faster framework.\n\nLet me know what your take is on the whole jQuery Mobile situation and what you will be migrating too! Drop in your comments or let's talk about it on [Twitter](https://twitter.com/shreerangp).\n",
    "iso8601Date": "2018-01-03T00:00:00-08:00",
    "basename": "2018-01-03-move-on-from-jqm"
  },
  "2019-09-10-templating-using-lit-html": {
    "title": "Templating using lit-html 🔥",
    "date": "2019-09-10",
    "author": "Shreerang Patwardhan",
    "tags": [
      "templates",
      "lit-html",
      "polymer",
      "google",
      "performace",
      "web performace"
    ],
    "photo_url": "/blog/The_UI_Dev_Default.png",
    "preview": "I joined [Williams Sonoma](https://www.williams-sonoma.com) as a …",
    "content": "\n\n\nI joined [Williams Sonoma](https://www.williams-sonoma.com) as a Software Engineering Manger over 6 months back and that is when I was exposed to the world of lit-html 🔥. lit-html is an extremely small, simple and fast Javascript templating library. It provides for fast, efficient rendering and updating of HTML. lit-html is part of the [Google Polymer project](https://www.polymer-project.org/) and is built and maintained by the amazing team of engineers at Google led by [Justin Fagnani](https://twitter.com/justinfagnani).\n\nlit-html utilizes some unique properties of JavaScript template literals and HTML `<template>` elements to function and achieve efficiency and fast performance. lit-html is not a framework and does not include any component model and so can be used with any existing framework like Vue or React or a component model like Web Components. lit-html focuses on one and only thing - **efficiently creating and updating the DOM.**\n\nLet's look at some key factors you would want to consider before you start using lit-html as your templating library.\n\n## Efficiency ⚡\nI have been mentioning that lit-html is fast and efficient. The reason why it is fast is because it efficiently parses and renders the HTML. lit-html doesn’t use Virtual DOM like the latest trends in many UI libraries like React or Preact for instance, but instead is using web standards to generate and update a UI component. With this approach, lit-html is capable of analyzing the template literals and updating only the changed data, leaving the actual HTML node as is, increasing the render performance compared to the virtual DOM approach. Let's look at a simple template.\n\n```javascript\n<p>Welcome to the world of lit-html ${data.name}!</p>\n```\n\nEvery time the value of `data.name` changes, libraries using virtual DOM will parse this template and re-render the entire node. lit-html on the other hand only renders the changed data value, which makes it extremely fast.\n\n## Learning Curve 📉\nlit-html relies on and leverages standard ES6 features, which means you need not learn anything new special syntax. If you are writing Javascript today you can start using lit-html now.\n\n## Browser Compatibility 🌏\nlit-html works across all major browsers including Google Chrome, Firefox, Safari, IE11 and Edge.\n\nHope this gave you a brief overview of `lt-html`. We are going to look into the detailed usage of it. In the blog posts to follow, I will look into the different aspects of creating and styling templates using lit-html and share some examples that you can follow along.",
    "iso8601Date": "2019-09-10T00:00:00-07:00",
    "basename": "2019-09-10-templating-using-lit-html"
  }
}
